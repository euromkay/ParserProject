
import java_cup.runtime.*;
import java.util.Vector;

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

parser code 
{:
:};

scan with {: return new Symbol (sym.EOF); :};

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

terminal
    T_ARROW,
    T_ASSIGN,
    T_BOOL,
    T_BREAK,
    T_CIN,
    T_COLON,
    T_COLONCOLON,
    T_COMMA,
    T_CONST,
    T_CONTINUE,
    T_COUT,
    T_DOT,
    T_ELSE,
    T_ENDL,
    T_EQU,
    T_EXIT,
    T_EXTERN,
    T_FALSE,
    T_FLOAT,
    T_FOREACH,
    T_FUNCTION,
    T_GT,
    T_GTE,
    T_INT,
    T_ISTREAM,
    T_LBRACE,
    T_LBRACKET,
    T_LPAREN,
    T_LT,
    T_LTE,
    T_MINUS,
    T_MINUSMINUS,
    T_MOD,
    T_NEQ,
    T_NULLPTR,
    T_OSTREAM,
    T_PLUS,
    T_PLUSPLUS,
    T_RBRACE,
    T_RBRACKET,
    T_RETURN,
    T_RPAREN,
    T_SEMI,
    T_SIZEOF,
    T_SLASH,
    T_STAR,
    T_STATIC,
    T_STRUCTDEF,
    T_THIS,
    T_TILDE,
    T_TRUE,
    T_VOID
    ;

terminal STO
	T_IF,
	T_WHILE
	;
	
terminal Operator
	T_AND,
    T_AMPERSAND,
    T_BAR,
    T_CARET,
    T_NOT,
    T_OR
	;

terminal String
	T_NEW,
	T_DELETE,
    T_FLOAT_LITERAL,
    T_INT_LITERAL,
    T_STR_LITERAL,
    T_ID_U,
    T_ID
    ;


//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

non terminal    
    Program,
    OptGlobalDecls,
    GlobalDecls,
    
    
    FieldVarDecl,
    
    FieldFuncDecl,
    
    WritePairList,
    WritePair,
    
    Pointer
    ;

non terminal Boolean
	OptStatic,
    OptElse,
    OptRef
	;
	

non terminal Integer
	PointerList,
	OptPointerList
	;

non terminal Operator
    Equality,
    Relation,
    UnarySign,
    
    AddOp,
    MulOp
    ;

non terminal String
    GlobalDecl,
    FuncDecl,
    ExternDecl,
    StructdefDecl,  
      
    VarDecl,
    ConstDecl,
    
    IfStmt,
    ForeachStmt,
    WhileStmt,
    BreakStmt,
    ContinueStmt,
    ExitStmt,
    ReturnStmt,
    ReadStmt,
    WriteStmt,
    DeleteStmt,
    NewStmt,
    CodeBlock,
    
    Stmt,
    
    IncDecOp
    ;

non terminal STO    
    Array,
    
    Expr,
    Expr0,
    Expr1,
    Expr2,
    Expr3,
    Expr4,
    Expr5,
    Expr6,
    Expr7,
    Expr8,
    
    Designator,
    Designator2,
    Designator3,
    
    CtorDtorDecl,
    CtorDef,
    DtorDef,
        
    ConstExpr,
    FuncDef,
    
    OptInit,
    
    ParamDecl
    ;

non terminal Type
    BasicType,
    DecoratedBasicType,
    StructType,
    Type,
    DecoratedType,
    ReturnType
    ;

non terminal Vector
    OptArrayList,
    ArrayList,
    
    OptCtorCall,
    CtorCall,
    
    OptFieldFuncsList,
    FieldFuncsList,
    FieldVarsList,
    
    OptCtorDtorList,
    CtorDtorList,
    
    OptExprList,
    ExprList,
    
    OptStmtList,
    StmtList,
    
    OptParamList,
    ParamList
    ;

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

Program ::=         {:
                        ((MyParser) parser).DoProgramStart(); 
                    :}
                    OptGlobalDecls
                    {:
                        ((MyParser) parser).DoProgramEnd();
                    :}
    ;


OptGlobalDecls ::=  GlobalDecls
    |               /* empty */
    ;


GlobalDecls ::= GlobalDecl:_1
				{:
				:}
    |           GlobalDecls GlobalDecl:_1
    			{:
    			:}
    ;


GlobalDecl ::=  ExternDecl:_1
				{:
					RESULT = _1;
				:}
    |           VarDecl:_1
				{:
					RESULT = _1;
				:}
    |           ConstDecl:_1
				{:
					RESULT = _1;
				:}
    |           StructdefDecl:_1
				{:
					RESULT = _1;
				:}
    |           FuncDecl:_1
				{:
					RESULT = _1;
				:}
    |           FuncDef:_1
				{:
					RESULT = _1.getName();
				:}
    ;


ExternDecl ::=      T_EXTERN DecoratedBasicType:_2 T_ID:_3 OptArrayList:_4
                    {:
                        ((MyParser) parser).DoExternDecl (_2, _3, _4);
                    :}
                    T_SEMI
    ;


VarDecl ::=         OptStatic:_1 DecoratedType:_2 T_ID:_3 OptArrayList:_4 OptInit:_5
                    {:
                        STO s = ((MyParser) parser).DoVarDecl (_1, _2,  _3, _4, _5);
                        RESULT = ((MyParser) parser).WriteVarDeclComment(s, _5);
                        ((MyParser) parser).WriteVarDecl(s);
                        ((MyParser) parser).WriteVarInit(s, _5);
                    :}
                    T_SEMI
    |               OptStatic:_1 StructType:_2 T_ID:_3 OptArrayList:_4 OptCtorCall:_5
                    {:
                        STO s = ((MyParser) parser).DoVarDecl (_1, _2, _3, _4, _5);
                        RESULT = ((MyParser) parser).WriteVarDeclComment(s, _5);
                        ((MyParser) parser).WriteVarDecl(s);
                        ((MyParser) parser).WriteVarInit(s, _5);
                    :}
                    T_SEMI
    ;


ConstDecl ::=       OptStatic:_1 T_CONST BasicType:_2 T_ID:_3 T_ASSIGN ConstExpr:_4
                    {:
                        STO s = ((MyParser) parser).DoConstDecl (_1, _2, _3, _4);
                        RESULT = ((MyParser) parser).WriteVarDeclComment(s, _4);
                        ((MyParser) parser).WriteVarDecl(s);
                        ((MyParser) parser).WriteVarInit(s, _4);
                    :}
                    T_SEMI
    ;


OptStatic ::=       T_STATIC
					{:
						RESULT = true;
					:}
    |               {:
						RESULT = false;
					:}
    ;


StructdefDecl ::=   T_STRUCTDEF T_ID_U:_1 T_LBRACE
                    {:
                        ((MyParser) parser).DoStructdefDecl1(_1);  
                        ((MyParser) parser).DoBlockOpen();
                    :}
                    FieldVarsList:_4
                    OptCtorDtorList:_3
                    {:
                    	((MyParser) parser).DoConstructorCheck(_3);
                    :}
                    OptFieldFuncsList:_5
                    {:
                        ((MyParser) parser).DoBlockClose();
                    	((MyParser) parser).DoStructFuncCheck(_5, _3);
                    :}
                    T_RBRACE T_SEMI
    ;

FieldVarsList ::=   FieldVarDecl:_1
					{:
						RESULT = new Vector<STO>();
						RESULT.add(_1);
					:}
    |               FieldVarsList:_2 FieldVarDecl:_1
    				{:
    					RESULT = _2;
						RESULT.add(_1);
    				:}
    ;


FieldVarDecl ::=    DecoratedType:_1 T_ID:_2 OptArrayList:_3 T_SEMI
					{:
						RESULT = ((MyParser)parser).DoFieldVarDecl(_2, _1, _3);
					:}
    ;


OptCtorDtorList ::= CtorDtorList:_1
					{:
						RESULT = _1;
					:}
    |               {:
    					RESULT = new Vector<STO>();
    				:}
    ;


CtorDtorList ::=    CtorDtorDecl:_1
					{:
						RESULT = new Vector<STO>();
						RESULT.add(_1);
    					((MyParser) parser).AddConstructor(_1);
					:}
    |               CtorDtorList:_2 CtorDtorDecl:_1
    				{:
    					RESULT = _2;
    					RESULT.add(_1);
    					((MyParser) parser).AddConstructor(_1);
    				:}
    ;


CtorDtorDecl ::=    CtorDef:_1
					{:
						RESULT = _1;
					:}
    |               DtorDef:_1
    				{:
						RESULT = _1;
    				:}
    ;


CtorDef ::=         T_ID_U:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_4);
                        ((MyParser) parser).WriteFuncDecl(_3, _4);
                    :}
                    T_LBRACE OptStmtList:_2 T_RBRACE
                    {:
                        RESULT = ((MyParser) parser).DoFuncDecl_2(_2);
                    :}
    ;


DtorDef ::=         T_TILDE T_ID_U:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1("~" + _3);
                        ((MyParser) parser).WriteFuncDecl("~", new Vector<VarSTO>());
                    :}
                    T_LPAREN T_RPAREN T_LBRACE OptStmtList:_2 T_RBRACE
                    {:
                        RESULT = ((MyParser) parser).DoFuncDecl_2(_2);
                    :}
    ;


OptFieldFuncsList ::= FieldFuncsList:_1
					{:
						RESULT = _1;
					:}
    |               {:
    					RESULT = new Vector<STO>();
    				:}
    ;


FieldFuncsList ::=  FieldFuncDecl:_1
					{:
						RESULT = new Vector<STO>();
						RESULT.add(_1);
					:}
    |               FieldFuncsList:_1 FieldFuncDecl:_2
    				{:
    					RESULT = _1;
    					RESULT.add(_2);
    				:}
    ;


FieldFuncDecl ::=   FuncDef:_1
					{:
						RESULT = _1;
					:}
    ;


FuncDef ::=         T_FUNCTION T_COLON ReturnType:_1 OptRef:_2 T_ID:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_1, _2, _3);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_4);
                        ((MyParser) parser).WriteFuncDecl(_3, _4);
                    :}
                    T_LBRACE OptStmtList:_5
                    {:
                        ((MyParser) parser).WriteFuncDeclFinish();
                        RESULT = ((MyParser) parser).DoFuncDecl_2(false, _1, _5);
                    :}
                    T_RBRACE
    ;


FuncDecl ::=        T_EXTERN T_FUNCTION T_COLON ReturnType:_1 T_ID:_3
                    {:
                        ((MyParser) parser).DoFuncDecl_1(_3);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_4);
                        ((MyParser) parser).DoFuncDecl_2(true, _1, null);
                    :}
                    T_SEMI
    ;


Type ::=            DecoratedType:_1
                    {:
                        RESULT = _1;
                    :}
    |               StructType:_1
                    {:
                        RESULT = _1;
                    :}
    ;


DecoratedType ::=   DecoratedBasicType:_1
                    {:
                        RESULT = _1;
                    :}
    |               StructType:_1 PointerList:_2
                    {:
                        RESULT = Type.mergeType(_1, _2);
                    :}
    ;


DecoratedBasicType ::= BasicType:_1 OptPointerList:_2
                    {:
                        RESULT = Type.mergeType(_1, _2);
                    :}
    ;


BasicType ::=       T_INT
                    {:
                        RESULT = new IntType();
                    :}
    |               T_FLOAT
                    {:
                        RESULT = new FloatType();
                    :}
    |               T_BOOL
                    {:
                        RESULT = new BoolType();
                    :}
    ;


StructType ::=      T_ID_U:_1
                    {:
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    :}
    ;


ReturnType ::=      Type:_1
                    {:
                        RESULT = _1;
                    :}
    |               T_VOID
    				{:
    					RESULT = new VoidType();
    				:}
    ;


OptPointerList ::=  PointerList:_1
					{:
						RESULT = _1;
					:}
    |               {:
    					RESULT = 0;
    				:}
    ;

PointerList ::=     Pointer
					{:
						RESULT = 1;
					:}
    |               PointerList:_1 Pointer
    				{:
    					RESULT = _1 + 1;
    				:}
    ;


Pointer ::=         T_STAR
    ;


OptArrayList ::=    ArrayList:_1
					{:
						RESULT = _1;
					:}
    |               {:
    					RESULT = new Vector<STO>();
    				:}
    ;

ArrayList ::=       Array:_1
					{:
						RESULT = new Vector<STO>();
						RESULT.add(_1);
					:}
    |               ArrayList:_1 Array:_2
    				{:
    					RESULT = _1;
    					RESULT.add(_2);
    				:}
    ;

Array ::=           T_LBRACKET ConstExpr:_1 T_RBRACKET
					{:
						RESULT = _1;
					:}
    ;


CodeBlock ::=       T_LBRACE
                    {: ((MyParser) parser).DoBlockOpen(); :}
                    OptStmtList
                    {: 
                    	((MyParser) parser).DoBlockClose();
                    	RESULT = "CodeBlock{}"; 
                    :}
                    T_RBRACE
    ;


OptStmtList ::=     StmtList:_1
					{:
						RESULT = _1;
					:}
    |               {:
    					RESULT = new Vector<String>();
    				:}
    ;


StmtList ::=        Stmt:_1
					{:
						//((MyParser) parser).WriteSpace(_1);
						RESULT = new Vector<STO>();
						RESULT.add(_1);
					:}
    |               StmtList:_1 Stmt:_2
    				{:
						//((MyParser) parser).WriteSpace(_2);
    					RESULT = _1;
    					RESULT.add(_2);
    					
    				:}
    ;


Stmt ::=        VarDecl:_1
				{:
					RESULT = _1;
				:}
    |           ConstDecl:_1
				{:
					RESULT = _1;
				:}
    |           CodeBlock:_1
				{:
					RESULT = _1;
				:}
    |           Expr:_1 T_SEMI
				{:
					RESULT = _1.getName();
				:}
    |           IfStmt:_1
				{:
					RESULT = _1;
				:}
    |           WhileStmt:_1
				{:
					RESULT = _1;
				:}
    |           ForeachStmt:_1
				{:
					RESULT = _1;
				:}
    |           BreakStmt:_1
				{:
					RESULT = _1;
				:}
    |           ContinueStmt:_1
				{:
					RESULT = _1;
				:}
    |           ExitStmt:_1
				{:
					RESULT = _1;
				:}
    |           ReturnStmt:_1
				{:
					RESULT = _1;
				:}
    |           ReadStmt:_1
				{:
					RESULT = _1;
				:}
    |           WriteStmt:_1
				{:
					RESULT = _1;
				:}
    |           NewStmt:_1
				{:
					RESULT = _1;
				:}
    |           DeleteStmt:_1
				{:
					RESULT = _1;
				:}
    ;


OptParamList ::=    ParamList:_1
					{:
					    RESULT = ((MyParser) parser).DoMultiParamCheck(_1);
					:}
    |               {:
                    	RESULT = new Vector<STO>();
                    :}
    ;


ParamList ::=       ParamDecl:_1
					{:
						RESULT = new Vector<STO> ();
						RESULT.addElement (_1);
					:}
    |               ParamList:_1 T_COMMA ParamDecl:_2
    				{:
    					RESULT = _1;
    					RESULT.addElement (_2);
    				:}
    ;


ParamDecl ::=       Type:_1 OptRef:_2 T_ID:_3 OptArrayList:_4
					{:
						RESULT = ((MyParser) parser).DoParamDecl(_1, _2, _3, _4);
					:}
    ;


OptRef ::=          T_AMPERSAND
					{:
						RESULT = true;
					:}
    |               {:
    					RESULT = false;
    				:}
    ;


OptInit ::=         T_ASSIGN Expr:_1
					{:
						RESULT = _1;
					:}
    |               /* empty */
    ;


OptCtorCall ::=     CtorCall:_1
					{:
						RESULT = _1;
					:}
    |               {:
    					
    				:}
    ;


CtorCall ::=        T_COLON T_LPAREN OptExprList:_1 T_RPAREN
					{:
						RESULT = _1;
					:}
    ;


IfStmt ::=          T_IF Expr:_1
					{:
						((MyParser) parser).WriteIfStatement(_1);	
						((MyParser) parser).DoExprBoolCheck(_1);					
					:}
					CodeBlock
					{:
						((MyParser) parser).WriteIfStatementEnd();
					:}
					OptElse:_2
					{:
						RESULT = "if (" + _1.getName() + "{}";
						if(_2)
							RESULT += "else{}"; 
					:}
    ;


OptElse ::=         T_ELSE CodeBlock
					{:
						((MyParser) parser).WriteEndStatementEnd();
						RESULT = true;
					:}
    |               {:
						((MyParser) parser).WriteEndStatementEnd();
						RESULT = false;
    				:}
    ;


WhileStmt ::=       T_WHILE:_3
					{:
						
						((MyParser) parser).WriteForWhileBegin("while");
					:}
					Expr:_1
					{:
						((MyParser) parser).DoExprBoolCheck(_1);
						((MyParser) parser).WriteWhileMiddle(_1);
					:} 
					CodeBlock
					{:
						((MyParser) parser).WriteWhileEnd();
						RESULT = "while (" + _1.getName() + "{}";
					:}
    ;


ForeachStmt ::=     T_FOREACH
					{:
						((MyParser) parser).WriteForWhileBegin("foreach");
					:}
					T_LPAREN Type:_1 OptRef:_2 T_ID:_3 T_COLON Expr:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoBlockOpen();
                        VarSTO v = new VarSTO(_3, _1);
                        v.setRef(_2);
                        STO arr = ((MyParser) parser).DoIterationVarDecl (v, _4);
                        RESULT = ((MyParser) parser).WriteForMiddle(v, arr);
                    :}
                    CodeBlock
                    {:
						((MyParser) parser).WriteForEnd();
                        ((MyParser) parser).DoBlockClose();
                    :}
    ;


BreakStmt ::=       T_BREAK T_SEMI
					{:
						((MyParser) parser).WriteContBr(MyParser.BREAK);
						RESULT = "break";
					:}
    ;


ContinueStmt ::=    T_CONTINUE T_SEMI
					{:
						((MyParser) parser).WriteContBr(MyParser.CONTINUE);
						RESULT = "continue";
					:}
    ;

DeleteStmt ::= 		T_DELETE Designator:_1 T_SEMI
					{:
						((MyParser) parser).DoAllocCheck("delete", _1, null);
						RESULT = ((MyParser) parser).WriteDeleteStmt(_1);
					:}
	;
	
ExitStmt ::=        T_EXIT T_LPAREN Expr:_1 T_RPAREN T_SEMI
					{:
						RESULT = ((MyParser) parser).DoExprIntCheck(_1);
						((MyParser) parser).WriteExit(_1);
					:}
    ;
    
NewStmt	 ::=		T_NEW Designator:_1 OptCtorCall:_2 T_SEMI
					{:
						STO f = ((MyParser) parser).DoAllocCheck("new", _1, _2);
						RESULT = ((MyParser) parser).WriteNewStmt(_1, _2, f);
					:}
	;


ReturnStmt ::=   T_RETURN T_SEMI
				{:
					RESULT = ((MyParser) parser).DoReturn(null);
					((MyParser) parser).WriteReturn(null);
				:}
    |               T_RETURN Expr:_1 T_SEMI
    			{:
    				RESULT = ((MyParser) parser).DoReturn(_1);
    				((MyParser) parser).WriteReturn(_1);
    			:}
    ;


ReadStmt ::=        T_CIN T_ISTREAM Designator:_1 T_SEMI
					{:
						((MyParser) parser).DoCIn(_1);
					:}
    ;


WriteStmt ::=       T_COUT:_2 T_OSTREAM:_3 WritePairList:_1 T_SEMI
					{:
						RESULT = "cout << " + _1;
					:}
					
    ;


WritePairList ::=   WritePair:_1
					{:
						RESULT = _1;
					:}
    |               WritePairList:_1 T_OSTREAM WritePair:_2
    				{:
    					RESULT = _1 + " << " + _2;
    				:}
    ;


WritePair ::=   Expr:_1
				{:
					((MyParser) parser).COut(_1);
					RESULT = _1.getName();
				:}
    |           T_ENDL
    			{:
    				((MyParser) parser).WriteENDL();
    				RESULT = "endl";
    			:}
    ;


ConstExpr ::=   Expr:_1
				{:
					RESULT = _1;
				:}
    ;


OptExprList ::=     ExprList:_1
					{:
						RESULT = _1;
					:}
    |               {:
    					RESULT = new Vector<STO> ();
    				:}
    ;


ExprList ::=     Expr:_1
				{:
					RESULT = new Vector<STO> ();
					RESULT.addElement(_1);
				:}
    |               ExprList:_1 T_COMMA Expr:_2
    			{:
    				RESULT = _1;
    				RESULT.addElement(_2);
    			:}
    ;


Expr ::=            Designator:_1 T_ASSIGN Expr:_2
                    {:
                        RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                        ((MyParser) parser).WriteAssignExpr(RESULT, _2);
                    :}
    |               Expr0:_1
                    {:
                        RESULT = _1;
                    :}
    ;

UnarySign ::=   T_PLUS
				{:
					RESULT = new PlusOp();
				:}
		|		T_MINUS
				{:
					RESULT = new NegOp();
				:}
		;

Expr0 ::=       Expr0:_1
				{:
					((MyParser) parser).WriteEqStmt_1(_1, MyParser.OR_FLAG);
				:}
				T_OR Expr1:_3
                {:
                	RESULT = ((MyParser) parser).DoBinaryExpr (_1, new RelationOp("||"), _3); 
                	((MyParser) parser).WriteEqStmt_2(_3, RESULT, MyParser.OR_FLAG);
                :}
    |           Expr1:_1
                {:
					RESULT = _1;
                :}
    ;


Expr1 ::=       Expr1:_1
				{:
					((MyParser) parser).WriteEqStmt_1(_1, MyParser.AND_FLAG);
				:}
				T_AND Expr2:_3
                {:
                	RESULT = ((MyParser) parser).DoBinaryExpr (_1, new RelationOp("&&"), _3);
                	((MyParser) parser).WriteEqStmt_2(_3, RESULT, MyParser.AND_FLAG);
                :}
    |           Expr2:_1
                {:
					RESULT = _1;
                :}
    ;


Expr2 ::=        Expr2:_1 T_BAR Expr3:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BarOp(), _3);
                    :}
    |               Expr3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr3 ::=        Expr3:_1 T_CARET Expr4:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new CaretOp(), _3);
                    :}
    |               Expr4:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr4 ::=        Expr4:_1 T_AMPERSAND Expr5:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AmpersandOp(), _3);
                    :}
    |               Expr5:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr5 ::=           Expr5:_1 Equality:_2 Expr6:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    :}
    |               Expr6:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr6 ::=           Expr6:_1 Relation:_2 Expr7:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    :}
    |               Expr7:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr7 ::=           Expr7:_1 AddOp:_2 Expr8:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);                   
                    :}
    |               Expr8:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr8 ::=        Expr8:_1 MulOp:_2 Designator:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    :}
    |               Designator:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Equality ::=     T_EQU
   				 {:
                 	RESULT = new EqualityOp(Operator.EQ);
                 :}
    |               T_NEQ
   				 {:
                 	RESULT = new EqualityOp(Operator.NEQ);
                 :}
    ;


Relation ::=     T_LT
                 {:
                 	RESULT = new ComparisonOp(Operator.LT, "<");
                 :}
    |            T_GT
                 {:
                 	RESULT = new ComparisonOp(Operator.GT, ">");
                 :}
    |            T_LTE
                 {:
                 	RESULT = new ComparisonOp(Operator.LTE, "<=");
                 :}
    |            T_GTE
                 {:
                 	RESULT = new ComparisonOp(Operator.GTE, ">=");
                 :}
    ;


AddOp ::=       	T_PLUS
                    {:
                        RESULT = new PlusOp();
                    :}
    |               T_MINUS
                    {:
                        RESULT = new MinusOp();
                    :}
    ;


MulOp ::=       	T_STAR
                    {:
                        RESULT = new MultiplyOp();
                    :}
    |               T_SLASH
                    {:
                        RESULT = new DivideOp();
                    :}
    |               T_MOD
                    {:
                        RESULT = new ModulusOp();
                    :}
    ;


IncDecOp ::=        T_PLUSPLUS
                    {:
                        RESULT = "+";
                    :}
    |               T_MINUSMINUS
                    {:
                        RESULT = "-";
                    :}
    ;


Designator ::=      T_STAR Designator:_1
                    {:
						RESULT = ((MyParser) parser).DoDeref(_1);
						((MyParser) parser).WriteDeRef(_1, RESULT);
                    :}
    |               T_AMPERSAND Designator:_1
                    {:
                    	RESULT = ((MyParser)parser).DoAddressOf(_1);
						((MyParser) parser).WriteAmpersand(_1, RESULT);
                    :}
    |               UnarySign:_1 Designator:_2
                    {:
						RESULT = ((MyParser) parser).DoBinaryExpr(_2, _1, _2);
                    :}
    |               T_NOT Designator:_1
                    {:
						RESULT = ((MyParser) parser).DoNotOp (_1);
						((MyParser) parser).WriteNotOp(_1, RESULT);
                    :}
    |               T_SIZEOF T_LPAREN Designator:_2 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoSizeOf(_2);
						((MyParser) parser).WriteSizeOf(RESULT);
                    :}
    |               T_SIZEOF T_LPAREN Type:_2 OptArrayList:_3 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoSizeOf(_2, _3);
						((MyParser) parser).WriteSizeOf(RESULT);
                    :}
    |               T_LPAREN DecoratedType:_1 T_RPAREN Designator:_2
                    {:
                        RESULT = ((MyParser) parser).DoCast(_1, _2);
						((MyParser) parser).WriteCast(_2, RESULT);
                    :}
    |               IncDecOp:_1 Designator:_2
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_2, Operator.newOp(_1+"P"), _2);
                    :}
    |               Designator2:_1 
                    {:
                        RESULT = _1;
                    :}
    ;


Designator2 ::=     Designator2:_1 T_DOT T_ID:_3
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                        ((MyParser) parser).WriteDot(_1, _3, RESULT);
                    :}
    |               Designator2:_1 T_LBRACKET Expr:_2 T_RBRACKET
                    {:
                      RESULT = ((MyParser) parser).DoDesignator2_Array (_1, _2);
                      ((MyParser) parser).WriteArrayIndex(_1, _2, RESULT);
                    :}
    |               Designator2:_1 T_ARROW T_ID:_3
                    {:
                        RESULT = ((MyParser) parser).DoArrowDeref(_1, _3);
                        ((MyParser) parser).WriteArrowDeref(_1, _3, RESULT);
                    :}
    |               Designator2:_1 IncDecOp:_2
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, Operator.newOp("P"+_2), _1);
                    :}
    |               Designator2:_1 T_LPAREN OptExprList:_2 T_RPAREN
                    {:
                      RESULT = ((MyParser) parser).DoFuncCall (_1, _2);
                      ((MyParser) parser).WriteFuncCall(_1, _2, RESULT);
                    :}
    |               Designator3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Designator3 ::=     T_LPAREN Expr:_2 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoParens(_2);
                    :}
    |               T_INT_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1, new IntType(), _1);
                        ((MyParser) parser).WriteIntLiteral(RESULT);
                    :}
    |               T_FLOAT_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1, new FloatType(), _1); 
                        ((MyParser) parser).WriteFloatLiteral(RESULT);
                    :}
    |               T_STR_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1, new StringType());
                        ((MyParser) parser).WriteStringLiteral(_1);
                    :}
    |               T_TRUE
                    {:
                        RESULT = new ConstSTO ("true", new BoolType(), "1");
                        ((MyParser) parser).WriteBoolLiteral(RESULT, MyParser.TRUE_S);
                    :}
    |               T_FALSE
                    {:
                        RESULT = new ConstSTO ("false", new BoolType(), "0");
                        ((MyParser) parser).WriteBoolLiteral(RESULT, MyParser.FALSE_S);
                    :}
    |               T_NULLPTR
                    {:
                        RESULT = new ExprSTO ("nullptr", new NullPointerType());
                        ((MyParser) parser).WriteNull(RESULT);
                    :}
    |               T_THIS
                    {:
                        RESULT = ((MyParser) parser).doThis();
                    :}
    |               T_COLONCOLON T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator4_ID (_1);
                    :}
    |               T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                        ((MyParser) parser).WriteID(RESULT, _1);
                    :}
    ;

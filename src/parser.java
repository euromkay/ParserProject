
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Mon Jan 19 18:56:57 PST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Mon Jan 19 18:56:57 PST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\307\000\002\123\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\124\002\000\002\032\010\000\002\125" +
    "\002\000\002\034\011\000\002\126\002\000\002\034\011" +
    "\000\002\127\002\000\002\035\012\000\002\016\003\000" +
    "\002\016\002\000\002\130\002\000\002\131\002\000\002" +
    "\132\002\000\002\033\015\000\002\112\003\000\002\112" +
    "\004\000\002\010\006\000\002\113\003\000\002\113\002" +
    "\000\002\114\003\000\002\114\004\000\002\011\003\000" +
    "\002\011\003\000\002\133\002\000\002\134\002\000\002" +
    "\006\013\000\002\135\002\000\002\007\012\000\002\110" +
    "\003\000\002\110\002\000\002\111\003\000\002\111\004" +
    "\000\002\012\003\000\002\136\002\000\002\137\002\000" +
    "\002\140\002\000\002\073\020\000\002\141\002\000\002" +
    "\142\002\000\002\031\015\000\002\101\003\000\002\101" +
    "\003\000\002\102\003\000\002\102\004\000\002\077\004" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\100\003\000\002\103\003\000\002\103\003\000\002" +
    "\022\003\000\002\022\002\000\002\021\003\000\002\021" +
    "\004\000\002\015\003\000\002\104\003\000\002\104\002" +
    "\000\002\105\003\000\002\105\004\000\002\054\005\000" +
    "\002\143\002\000\002\144\002\000\002\051\007\000\002" +
    "\117\003\000\002\117\002\000\002\120\003\000\002\120" +
    "\004\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\004\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\121\003" +
    "\000\002\121\002\000\002\122\003\000\002\122\005\000" +
    "\002\075\006\000\002\020\003\000\002\020\002\000\002" +
    "\074\004\000\002\074\002\000\002\106\003\000\002\106" +
    "\002\000\002\107\006\000\002\145\002\000\002\146\002" +
    "\000\002\036\010\000\002\017\004\000\002\017\002\000" +
    "\002\147\002\000\002\150\002\000\002\040\007\000\002" +
    "\151\002\000\002\152\002\000\002\037\015\000\002\041" +
    "\004\000\002\042\004\000\002\047\005\000\002\043\007" +
    "\000\002\050\006\000\002\044\004\000\002\044\005\000" +
    "\002\045\006\000\002\046\006\000\002\013\003\000\002" +
    "\013\005\000\002\014\003\000\002\014\003\000\002\072" +
    "\003\000\002\115\003\000\002\115\002\000\002\116\003" +
    "\000\002\116\005\000\002\055\005\000\002\055\003\000" +
    "\002\025\003\000\002\025\003\000\002\153\002\000\002" +
    "\056\006\000\002\056\003\000\002\154\002\000\002\057" +
    "\006\000\002\057\003\000\002\060\005\000\002\060\003" +
    "\000\002\061\005\000\002\061\003\000\002\062\005\000" +
    "\002\062\003\000\002\063\005\000\002\063\003\000\002" +
    "\064\005\000\002\064\003\000\002\065\005\000\002\065" +
    "\003\000\002\066\005\000\002\066\003\000\002\023\003" +
    "\000\002\023\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\053\003\000\002\053\003\000\002\067\004" +
    "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
    "\002\067\006\000\002\067\007\000\002\067\006\000\002" +
    "\067\004\000\002\067\003\000\002\070\005\000\002\070" +
    "\006\000\002\070\005\000\002\070\004\000\002\070\006" +
    "\000\002\070\003\000\002\071\005\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\004\000\002\071\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\026\002\001\006\001\014\001\024\001\026" +
    "\001\030\001\033\001\062\001\063\001\105\001\001\002" +
    "\000\004\002\u014a\001\002\000\026\002\ufffd\006\uffeb\014" +
    "\uffeb\024\007\026\uffeb\030\011\033\uffeb\062\015\063\012" +
    "\105\uffeb\001\002\000\026\002\ufff6\006\ufff6\014\ufff6\024" +
    "\ufff6\026\ufff6\030\ufff6\033\ufff6\062\ufff6\063\ufff6\105\ufff6" +
    "\001\002\000\012\006\032\026\034\030\u013b\033\035\001" +
    "\002\000\026\002\ufff7\006\ufff7\014\ufff7\024\ufff7\026\ufff7" +
    "\030\ufff7\033\ufff7\062\ufff7\063\ufff7\105\ufff7\001\002\000" +
    "\004\011\u012c\001\002\000\004\105\247\001\002\000\014" +
    "\006\032\014\033\026\034\033\035\105\030\001\002\000" +
    "\026\002\ufff9\006\ufff9\014\ufff9\024\ufff9\026\ufff9\030\ufff9" +
    "\033\ufff9\062\ufff9\063\ufff9\105\ufff9\001\002\000\014\006" +
    "\uffec\014\uffec\026\uffec\033\uffec\105\uffec\001\002\000\026" +
    "\002\ufffc\006\ufffc\014\ufffc\024\ufffc\026\ufffc\030\ufffc\033" +
    "\ufffc\062\ufffc\063\ufffc\105\ufffc\001\002\000\026\002\ufff5" +
    "\006\ufff5\014\ufff5\024\ufff5\026\ufff5\030\ufff5\033\ufff5\062" +
    "\ufff5\063\ufff5\105\ufff5\001\002\000\026\002\ufffe\006\uffeb" +
    "\014\uffeb\024\007\026\uffeb\030\011\033\uffeb\062\015\063" +
    "\012\105\uffeb\001\002\000\026\002\ufffa\006\ufffa\014\ufffa" +
    "\024\ufffa\026\ufffa\030\ufffa\033\ufffa\062\ufffa\063\ufffa\105" +
    "\ufffa\001\002\000\004\002\000\001\002\000\026\002\ufff8" +
    "\006\ufff8\014\ufff8\024\ufff8\026\ufff8\030\ufff8\033\ufff8\062" +
    "\ufff8\063\ufff8\105\ufff8\001\002\000\026\002\ufffb\006\ufffb" +
    "\014\ufffb\024\ufffb\026\ufffb\030\ufffb\033\ufffb\062\ufffb\063" +
    "\ufffb\105\ufffb\001\002\000\012\036\uffca\055\uffca\073\uffca" +
    "\106\uffca\001\002\000\004\106\240\001\002\000\014\036" +
    "\uffc0\055\uffc0\061\114\073\uffc0\106\uffc0\001\002\000\014" +
    "\036\uffc4\055\uffc4\061\uffc4\073\uffc4\106\uffc4\001\002\000" +
    "\006\061\114\106\224\001\002\000\014\036\uffc5\055\uffc5" +
    "\061\uffc5\073\uffc5\106\uffc5\001\002\000\010\006\032\026" +
    "\034\033\035\001\002\000\014\036\uffc6\055\uffc6\061\uffc6" +
    "\073\uffc6\106\uffc6\001\002\000\014\036\uffc7\055\uffc7\061" +
    "\uffc7\073\uffc7\106\uffc7\001\002\000\004\106\037\001\002" +
    "\000\004\005\040\001\002\000\046\012\100\025\065\037" +
    "\073\042\064\043\074\046\101\050\076\051\063\057\067" +
    "\061\102\064\060\066\053\073\071\076\061\102\077\103" +
    "\062\104\044\106\070\001\002\000\056\013\uff63\022\uff63" +
    "\031\uff63\032\uff63\035\uff63\040\uff63\041\uff63\042\uff63\044" +
    "\174\045\uff63\047\uff63\050\uff63\053\uff63\055\uff63\056\uff63" +
    "\060\176\061\175\072\uff63\073\uff63\074\uff63\075\uff63\077" +
    "\uff63\001\002\000\060\005\222\013\uff61\022\uff61\031\uff61" +
    "\032\uff61\035\uff61\040\uff61\041\uff61\042\uff61\044\uff61\045" +
    "\uff61\047\uff61\050\uff61\053\uff61\055\uff61\056\uff61\060\uff61" +
    "\061\uff61\072\uff61\073\uff61\074\uff61\075\uff61\077\uff61\001" +
    "\002\000\050\013\uff65\022\uff65\031\uff65\032\uff65\035\uff65" +
    "\040\uff65\041\uff65\042\170\045\uff65\047\uff65\050\171\053" +
    "\uff65\055\uff65\056\uff65\072\uff65\073\uff65\074\uff65\075\uff65" +
    "\077\uff65\001\002\000\076\004\uff41\005\uff41\011\uff41\013" +
    "\uff41\017\uff41\022\uff41\031\uff41\032\uff41\035\uff41\036\uff41" +
    "\037\uff41\040\uff41\041\uff41\042\uff41\043\uff41\044\uff41\045" +
    "\uff41\047\uff41\050\uff41\051\uff41\053\uff41\055\uff41\056\uff41" +
    "\060\uff41\061\uff41\072\uff41\073\uff41\074\uff41\075\uff41\077" +
    "\uff41\001\002\000\044\013\uff67\022\uff67\031\166\032\162" +
    "\035\uff67\040\164\041\163\045\uff67\047\uff67\053\uff67\055" +
    "\uff67\056\uff67\072\uff67\073\uff67\074\uff67\075\uff67\077\uff67" +
    "\001\002\000\034\013\uff69\022\160\035\uff69\045\157\047" +
    "\uff69\053\uff69\055\uff69\056\uff69\072\uff69\073\uff69\074\uff69" +
    "\075\uff69\077\uff69\001\002\000\076\004\uff45\005\uff45\011" +
    "\uff45\013\uff45\017\uff45\022\uff45\031\uff45\032\uff45\035\uff45" +
    "\036\uff45\037\uff45\040\uff45\041\uff45\042\uff45\043\uff45\044" +
    "\uff45\045\uff45\047\uff45\050\uff45\051\uff45\053\uff45\055\uff45" +
    "\056\uff45\060\uff45\061\uff45\072\uff45\073\uff45\074\uff45\075" +
    "\uff45\077\uff45\001\002\000\076\004\206\005\uff4b\011\uff4b" +
    "\013\uff4b\017\207\022\uff4b\031\uff4b\032\uff4b\035\uff4b\036" +
    "\203\037\204\040\uff4b\041\uff4b\042\uff4b\043\074\044\uff4b" +
    "\045\uff4b\047\uff4b\050\uff4b\051\063\053\uff4b\055\uff4b\056" +
    "\uff4b\060\uff4b\061\uff4b\072\uff4b\073\uff4b\074\uff4b\075\uff4b" +
    "\077\uff4b\001\002\000\030\013\uff6b\035\uff6b\047\uff6b\053" +
    "\uff6b\055\uff6b\056\uff6b\072\uff6b\073\154\074\uff6b\075\uff6b" +
    "\077\uff6b\001\002\000\026\013\uff6d\035\uff6d\047\uff6d\053" +
    "\uff6d\055\uff6d\056\uff6d\072\uff6d\074\uff6d\075\152\077\uff6d" +
    "\001\002\000\076\004\uff40\005\uff40\011\uff40\013\uff40\017" +
    "\uff40\022\uff40\031\uff40\032\uff40\035\uff40\036\uff40\037\uff40" +
    "\040\uff40\041\uff40\042\uff40\043\uff40\044\uff40\045\uff40\047" +
    "\uff40\050\uff40\051\uff40\053\uff40\055\uff40\056\uff40\060\uff40" +
    "\061\uff40\072\uff40\073\uff40\074\uff40\075\uff40\077\uff40\001" +
    "\002\000\004\056\uffee\001\002\000\024\013\uff6f\035\uff6f" +
    "\047\uff6f\053\uff6f\055\uff6f\056\uff6f\072\uff6f\074\150\077" +
    "\uff6f\001\002\000\022\013\uff72\035\uff72\047\uff72\053\uff72" +
    "\055\uff72\056\uff72\072\uff71\077\uff72\001\002\000\020\013" +
    "\uff77\035\uff77\047\uff77\053\uff77\055\uff77\056\uff77\077\uff74" +
    "\001\002\000\076\004\uff3d\005\uff3d\011\uff3d\013\uff3d\017" +
    "\uff3d\022\uff3d\031\uff3d\032\uff3d\035\uff3d\036\uff3d\037\uff3d" +
    "\040\uff3d\041\uff3d\042\uff3d\043\uff3d\044\uff3d\045\uff3d\047" +
    "\uff3d\050\uff3d\051\uff3d\053\uff3d\055\uff3d\056\uff3d\060\uff3d" +
    "\061\uff3d\072\uff3d\073\uff3d\074\uff3d\075\uff3d\077\uff3d\001" +
    "\002\000\046\012\100\025\065\037\073\042\064\043\074" +
    "\046\101\050\076\051\063\057\067\061\102\064\060\066" +
    "\053\073\071\076\061\102\077\103\062\104\044\106\070" +
    "\001\002\000\076\004\uff43\005\uff43\011\uff43\013\uff43\017" +
    "\uff43\022\uff43\031\uff43\032\uff43\035\uff43\036\uff43\037\uff43" +
    "\040\uff43\041\uff43\042\uff43\043\uff43\044\uff43\045\uff43\047" +
    "\uff43\050\uff43\051\uff43\053\uff43\055\uff43\056\uff43\060\uff43" +
    "\061\uff43\072\uff43\073\uff43\074\uff43\075\uff43\077\uff43\001" +
    "\002\000\124\004\uff55\005\uff55\011\uff55\012\uff55\013\uff55" +
    "\017\uff55\022\uff55\025\uff55\031\uff55\032\uff55\035\uff55\036" +
    "\uff55\037\uff55\040\uff55\041\uff55\042\uff55\043\uff55\044\uff55" +
    "\045\uff55\046\uff55\047\uff55\050\uff55\051\uff55\053\uff55\055" +
    "\uff55\056\uff55\057\uff55\060\uff55\061\uff55\064\uff55\066\uff55" +
    "\072\uff55\073\uff55\074\uff55\075\uff55\076\uff55\077\uff55\102" +
    "\uff55\103\uff55\104\uff55\106\uff55\001\002\000\046\012\uff75" +
    "\025\uff75\037\uff75\042\uff75\043\uff75\046\uff75\050\uff75\051" +
    "\uff75\057\uff75\061\uff75\064\uff75\066\uff75\073\uff75\076\uff75" +
    "\102\uff75\103\uff75\104\uff75\106\uff75\001\002\000\076\004" +
    "\uff3f\005\uff3f\011\uff3f\013\uff3f\017\uff3f\022\uff3f\031\uff3f" +
    "\032\uff3f\035\uff3f\036\uff3f\037\uff3f\040\uff3f\041\uff3f\042" +
    "\uff3f\043\uff3f\044\uff3f\045\uff3f\047\uff3f\050\uff3f\051\uff3f" +
    "\053\uff3f\055\uff3f\056\uff3f\060\uff3f\061\uff3f\072\uff3f\073" +
    "\uff3f\074\uff3f\075\uff3f\077\uff3f\001\002\000\006\053\uff7d" +
    "\056\uff7d\001\002\000\004\037\122\001\002\000\076\004" +
    "\uff3b\005\uff3b\011\uff3b\013\uff3b\017\uff3b\022\uff3b\031\uff3b" +
    "\032\uff3b\035\uff3b\036\uff3b\037\uff3b\040\uff3b\041\uff3b\042" +
    "\uff3b\043\uff3b\044\uff3b\045\uff3b\047\uff3b\050\uff3b\051\uff3b" +
    "\053\uff3b\055\uff3b\056\uff3b\060\uff3b\061\uff3b\072\uff3b\073" +
    "\uff3b\074\uff3b\075\uff3b\077\uff3b\001\002\000\046\012\100" +
    "\025\065\037\073\042\064\043\074\046\101\050\076\051" +
    "\063\057\067\061\102\064\060\066\053\073\071\076\061" +
    "\102\077\103\062\104\044\106\070\001\002\000\046\012" +
    "\100\025\065\037\073\042\064\043\074\046\101\050\076" +
    "\051\063\057\067\061\102\064\060\066\053\073\071\076" +
    "\061\102\077\103\062\104\044\106\070\001\002\000\056" +
    "\006\032\012\100\025\065\026\034\033\035\037\073\042" +
    "\064\043\074\046\101\050\076\051\063\057\067\061\102" +
    "\064\060\066\053\073\071\076\061\102\077\103\062\104" +
    "\044\105\030\106\070\001\002\000\124\004\uff54\005\uff54" +
    "\011\uff54\012\uff54\013\uff54\017\uff54\022\uff54\025\uff54\031" +
    "\uff54\032\uff54\035\uff54\036\uff54\037\uff54\040\uff54\041\uff54" +
    "\042\uff54\043\uff54\044\uff54\045\uff54\046\uff54\047\uff54\050" +
    "\uff54\051\uff54\053\uff54\055\uff54\056\uff54\057\uff54\060\uff54" +
    "\061\uff54\064\uff54\066\uff54\072\uff54\073\uff54\074\uff54\075" +
    "\uff54\076\uff54\077\uff54\102\uff54\103\uff54\104\uff54\106\uff54" +
    "\001\002\000\046\012\100\025\065\037\073\042\064\043" +
    "\074\046\101\050\076\051\063\057\067\061\102\064\060" +
    "\066\053\073\071\076\061\102\077\103\062\104\044\106" +
    "\070\001\002\000\046\012\uff76\025\uff76\037\uff76\042\uff76" +
    "\043\uff76\046\uff76\050\uff76\051\uff76\057\uff76\061\uff76\064" +
    "\uff76\066\uff76\073\uff76\076\uff76\102\uff76\103\uff76\104\uff76" +
    "\106\uff76\001\002\000\076\004\uff42\005\uff42\011\uff42\013" +
    "\uff42\017\uff42\022\uff42\031\uff42\032\uff42\035\uff42\036\uff42" +
    "\037\uff42\040\uff42\041\uff42\042\uff42\043\uff42\044\uff42\045" +
    "\uff42\047\uff42\050\uff42\051\uff42\053\uff42\055\uff42\056\uff42" +
    "\060\uff42\061\uff42\072\uff42\073\uff42\074\uff42\075\uff42\077" +
    "\uff42\001\002\000\004\106\104\001\002\000\076\004\uff3e" +
    "\005\uff3e\011\uff3e\013\uff3e\017\uff3e\022\uff3e\031\uff3e\032" +
    "\uff3e\035\uff3e\036\uff3e\037\uff3e\040\uff3e\041\uff3e\042\uff3e" +
    "\043\uff3e\044\uff3e\045\uff3e\047\uff3e\050\uff3e\051\uff3e\053" +
    "\uff3e\055\uff3e\056\uff3e\060\uff3e\061\uff3e\072\uff3e\073\uff3e" +
    "\074\uff3e\075\uff3e\077\uff3e\001\002\000\046\012\100\025" +
    "\065\037\073\042\064\043\074\046\101\050\076\051\063" +
    "\057\067\061\102\064\060\066\053\073\071\076\061\102" +
    "\077\103\062\104\044\106\070\001\002\000\062\005\uff53" +
    "\011\uff53\013\uff53\022\uff53\031\uff53\032\uff53\035\uff53\040" +
    "\uff53\041\uff53\042\uff53\044\uff53\045\uff53\047\uff53\050\uff53" +
    "\053\uff53\055\uff53\056\uff53\060\uff53\061\uff53\072\uff53\073" +
    "\uff53\074\uff53\075\uff53\077\uff53\001\002\000\076\004\uff3c" +
    "\005\uff3c\011\uff3c\013\uff3c\017\uff3c\022\uff3c\031\uff3c\032" +
    "\uff3c\035\uff3c\036\uff3c\037\uff3c\040\uff3c\041\uff3c\042\uff3c" +
    "\043\uff3c\044\uff3c\045\uff3c\047\uff3c\050\uff3c\051\uff3c\053" +
    "\uff3c\055\uff3c\056\uff3c\060\uff3c\061\uff3c\072\uff3c\073\uff3c" +
    "\074\uff3c\075\uff3c\077\uff3c\001\002\000\062\005\uff51\011" +
    "\uff51\013\uff51\022\uff51\031\uff51\032\uff51\035\uff51\040\uff51" +
    "\041\uff51\042\uff51\044\uff51\045\uff51\047\uff51\050\uff51\053" +
    "\uff51\055\uff51\056\uff51\060\uff51\061\uff51\072\uff51\073\uff51" +
    "\074\uff51\075\uff51\077\uff51\001\002\000\004\061\114\001" +
    "\002\000\004\055\112\001\002\000\004\055\111\001\002" +
    "\000\076\004\uff44\005\uff44\011\uff44\013\uff44\017\uff44\022" +
    "\uff44\031\uff44\032\uff44\035\uff44\036\uff44\037\uff44\040\uff44" +
    "\041\uff44\042\uff44\043\uff44\044\uff44\045\uff44\047\uff44\050" +
    "\uff44\051\uff44\053\uff44\055\uff44\056\uff44\060\uff44\061\uff44" +
    "\072\uff44\073\uff44\074\uff44\075\uff44\077\uff44\001\002\000" +
    "\046\012\100\025\065\037\073\042\064\043\074\046\101" +
    "\050\076\051\063\057\067\061\102\064\060\066\053\073" +
    "\071\076\061\102\077\103\062\104\044\106\070\001\002" +
    "\000\062\005\uff4d\011\uff4d\013\uff4d\022\uff4d\031\uff4d\032" +
    "\uff4d\035\uff4d\040\uff4d\041\uff4d\042\uff4d\044\uff4d\045\uff4d" +
    "\047\uff4d\050\uff4d\053\uff4d\055\uff4d\056\uff4d\060\uff4d\061" +
    "\uff4d\072\uff4d\073\uff4d\074\uff4d\075\uff4d\077\uff4d\001\002" +
    "\000\014\036\uffbd\055\uffbd\061\uffbd\073\uffbd\106\uffbd\001" +
    "\002\000\014\036\uffc9\055\uffc9\061\114\073\uffc9\106\uffc9" +
    "\001\002\000\014\036\uffbf\055\uffbf\061\uffbf\073\uffbf\106" +
    "\uffbf\001\002\000\014\036\uffbe\055\uffbe\061\uffbe\073\uffbe" +
    "\106\uffbe\001\002\000\062\005\uff4c\011\uff4c\013\uff4c\022" +
    "\uff4c\031\uff4c\032\uff4c\035\uff4c\040\uff4c\041\uff4c\042\uff4c" +
    "\044\uff4c\045\uff4c\047\uff4c\050\uff4c\053\uff4c\055\uff4c\056" +
    "\uff4c\060\uff4c\061\uff4c\072\uff4c\073\uff4c\074\uff4c\075\uff4c" +
    "\077\uff4c\001\002\000\062\005\uff52\011\uff52\013\uff52\022" +
    "\uff52\031\uff52\032\uff52\035\uff52\040\uff52\041\uff52\042\uff52" +
    "\044\uff52\045\uff52\047\uff52\050\uff52\053\uff52\055\uff52\056" +
    "\uff52\060\uff52\061\uff52\072\uff52\073\uff52\074\uff52\075\uff52" +
    "\077\uff52\001\002\000\056\006\032\012\100\025\065\026" +
    "\034\033\035\037\073\042\064\043\074\046\101\050\076" +
    "\051\063\057\067\061\102\064\060\066\053\073\071\076" +
    "\061\102\077\103\062\104\044\105\030\106\070\001\002" +
    "\000\004\055\137\001\002\000\014\036\uffcb\055\uffcb\061" +
    "\114\073\uffcb\106\uffcb\001\002\000\006\036\131\055\uffbb" +
    "\001\002\000\012\036\uffcc\055\uffcc\073\uffcc\106\uffcc\001" +
    "\002\000\016\005\uffbc\011\uffbc\013\uffbc\036\131\055\uffbc" +
    "\056\uffbc\001\002\000\004\055\135\001\002\000\046\012" +
    "\100\025\065\037\073\042\064\043\074\046\101\050\076" +
    "\051\063\057\067\061\102\064\060\066\053\073\071\076" +
    "\061\102\077\103\062\104\044\106\070\001\002\000\016" +
    "\005\uffba\011\uffba\013\uffba\036\uffba\055\uffba\056\uffba\001" +
    "\002\000\004\053\134\001\002\000\016\005\uffb8\011\uffb8" +
    "\013\uffb8\036\uffb8\055\uffb8\056\uffb8\001\002\000\062\005" +
    "\uff4e\011\uff4e\013\uff4e\022\uff4e\031\uff4e\032\uff4e\035\uff4e" +
    "\040\uff4e\041\uff4e\042\uff4e\044\uff4e\045\uff4e\047\uff4e\050" +
    "\uff4e\053\uff4e\055\uff4e\056\uff4e\060\uff4e\061\uff4e\072\uff4e" +
    "\073\uff4e\074\uff4e\075\uff4e\077\uff4e\001\002\000\016\005" +
    "\uffb9\011\uffb9\013\uffb9\036\uffb9\055\uffb9\056\uffb9\001\002" +
    "\000\062\005\uff4f\011\uff4f\013\uff4f\022\uff4f\031\uff4f\032" +
    "\uff4f\035\uff4f\040\uff4f\041\uff4f\042\uff4f\044\uff4f\045\uff4f" +
    "\047\uff4f\050\uff4f\053\uff4f\055\uff4f\056\uff4f\060\uff4f\061" +
    "\uff4f\072\uff4f\073\uff4f\074\uff4f\075\uff4f\077\uff4f\001\002" +
    "\000\062\005\uff50\011\uff50\013\uff50\022\uff50\031\uff50\032" +
    "\uff50\035\uff50\040\uff50\041\uff50\042\uff50\044\uff50\045\uff50" +
    "\047\uff50\050\uff50\053\uff50\055\uff50\056\uff50\060\uff50\061" +
    "\uff50\072\uff50\073\uff50\074\uff50\075\uff50\077\uff50\001\002" +
    "\000\004\077\142\001\002\000\046\012\100\025\065\037" +
    "\073\042\064\043\074\046\101\050\076\051\063\057\067" +
    "\061\102\064\060\066\053\073\071\076\061\102\077\103" +
    "\062\104\044\106\070\001\002\000\056\013\uff61\022\uff61" +
    "\031\uff61\032\uff61\035\uff61\040\uff61\041\uff61\042\uff61\044" +
    "\uff61\045\uff61\047\uff61\050\uff61\053\uff61\055\uff61\056\uff61" +
    "\060\uff61\061\uff61\072\uff61\073\uff61\074\uff61\075\uff61\077" +
    "\uff61\001\002\000\022\013\uff73\035\uff73\047\uff73\053\uff73" +
    "\055\uff73\056\uff73\072\uff71\077\uff73\001\002\000\004\072" +
    "\146\001\002\000\046\012\100\025\065\037\073\042\064" +
    "\043\074\046\101\050\076\051\063\057\067\061\102\064" +
    "\060\066\053\073\071\076\061\102\077\103\062\104\044" +
    "\106\070\001\002\000\024\013\uff70\035\uff70\047\uff70\053" +
    "\uff70\055\uff70\056\uff70\072\uff70\074\150\077\uff70\001\002" +
    "\000\046\012\100\025\065\037\073\042\064\043\074\046" +
    "\101\050\076\051\063\057\067\061\102\064\060\066\053" +
    "\073\071\076\061\102\077\103\062\104\044\106\070\001" +
    "\002\000\026\013\uff6e\035\uff6e\047\uff6e\053\uff6e\055\uff6e" +
    "\056\uff6e\072\uff6e\074\uff6e\075\152\077\uff6e\001\002\000" +
    "\046\012\100\025\065\037\073\042\064\043\074\046\101" +
    "\050\076\051\063\057\067\061\102\064\060\066\053\073" +
    "\071\076\061\102\077\103\062\104\044\106\070\001\002" +
    "\000\030\013\uff6c\035\uff6c\047\uff6c\053\uff6c\055\uff6c\056" +
    "\uff6c\072\uff6c\073\154\074\uff6c\075\uff6c\077\uff6c\001\002" +
    "\000\046\012\100\025\065\037\073\042\064\043\074\046" +
    "\101\050\076\051\063\057\067\061\102\064\060\066\053" +
    "\073\071\076\061\102\077\103\062\104\044\106\070\001" +
    "\002\000\034\013\uff6a\022\160\035\uff6a\045\157\047\uff6a" +
    "\053\uff6a\055\uff6a\056\uff6a\072\uff6a\073\uff6a\074\uff6a\075" +
    "\uff6a\077\uff6a\001\002\000\046\012\100\025\065\037\073" +
    "\042\064\043\074\046\101\050\076\051\063\057\067\061" +
    "\102\064\060\066\053\073\071\076\061\102\077\103\062" +
    "\104\044\106\070\001\002\000\046\012\uff5f\025\uff5f\037" +
    "\uff5f\042\uff5f\043\uff5f\046\uff5f\050\uff5f\051\uff5f\057\uff5f" +
    "\061\uff5f\064\uff5f\066\uff5f\073\uff5f\076\uff5f\102\uff5f\103" +
    "\uff5f\104\uff5f\106\uff5f\001\002\000\046\012\uff60\025\uff60" +
    "\037\uff60\042\uff60\043\uff60\046\uff60\050\uff60\051\uff60\057" +
    "\uff60\061\uff60\064\uff60\066\uff60\073\uff60\076\uff60\102\uff60" +
    "\103\uff60\104\uff60\106\uff60\001\002\000\044\013\uff68\022" +
    "\uff68\031\166\032\162\035\uff68\040\164\041\163\045\uff68" +
    "\047\uff68\053\uff68\055\uff68\056\uff68\072\uff68\073\uff68\074" +
    "\uff68\075\uff68\077\uff68\001\002\000\046\012\uff5b\025\uff5b" +
    "\037\uff5b\042\uff5b\043\uff5b\046\uff5b\050\uff5b\051\uff5b\057" +
    "\uff5b\061\uff5b\064\uff5b\066\uff5b\073\uff5b\076\uff5b\102\uff5b" +
    "\103\uff5b\104\uff5b\106\uff5b\001\002\000\046\012\uff5c\025" +
    "\uff5c\037\uff5c\042\uff5c\043\uff5c\046\uff5c\050\uff5c\051\uff5c" +
    "\057\uff5c\061\uff5c\064\uff5c\066\uff5c\073\uff5c\076\uff5c\102" +
    "\uff5c\103\uff5c\104\uff5c\106\uff5c\001\002\000\046\012\uff5e" +
    "\025\uff5e\037\uff5e\042\uff5e\043\uff5e\046\uff5e\050\uff5e\051" +
    "\uff5e\057\uff5e\061\uff5e\064\uff5e\066\uff5e\073\uff5e\076\uff5e" +
    "\102\uff5e\103\uff5e\104\uff5e\106\uff5e\001\002\000\046\012" +
    "\100\025\065\037\073\042\064\043\074\046\101\050\076" +
    "\051\063\057\067\061\102\064\060\066\053\073\071\076" +
    "\061\102\077\103\062\104\044\106\070\001\002\000\046" +
    "\012\uff5d\025\uff5d\037\uff5d\042\uff5d\043\uff5d\046\uff5d\050" +
    "\uff5d\051\uff5d\057\uff5d\061\uff5d\064\uff5d\066\uff5d\073\uff5d" +
    "\076\uff5d\102\uff5d\103\uff5d\104\uff5d\106\uff5d\001\002\000" +
    "\050\013\uff66\022\uff66\031\uff66\032\uff66\035\uff66\040\uff66" +
    "\041\uff66\042\170\045\uff66\047\uff66\050\171\053\uff66\055" +
    "\uff66\056\uff66\072\uff66\073\uff66\074\uff66\075\uff66\077\uff66" +
    "\001\002\000\046\012\uff59\025\uff59\037\uff59\042\uff59\043" +
    "\uff59\046\uff59\050\uff59\051\uff59\057\uff59\061\uff59\064\uff59" +
    "\066\uff59\073\uff59\076\uff59\102\uff59\103\uff59\104\uff59\106" +
    "\uff59\001\002\000\046\012\uff5a\025\uff5a\037\uff5a\042\uff5a" +
    "\043\uff5a\046\uff5a\050\uff5a\051\uff5a\057\uff5a\061\uff5a\064" +
    "\uff5a\066\uff5a\073\uff5a\076\uff5a\102\uff5a\103\uff5a\104\uff5a" +
    "\106\uff5a\001\002\000\046\012\100\025\065\037\073\042" +
    "\064\043\074\046\101\050\076\051\063\057\067\061\102" +
    "\064\060\066\053\073\071\076\061\102\077\103\062\104" +
    "\044\106\070\001\002\000\056\013\uff64\022\uff64\031\uff64" +
    "\032\uff64\035\uff64\040\uff64\041\uff64\042\uff64\044\174\045" +
    "\uff64\047\uff64\050\uff64\053\uff64\055\uff64\056\uff64\060\176" +
    "\061\175\072\uff64\073\uff64\074\uff64\075\uff64\077\uff64\001" +
    "\002\000\046\012\uff56\025\uff56\037\uff56\042\uff56\043\uff56" +
    "\046\uff56\050\uff56\051\uff56\057\uff56\061\uff56\064\uff56\066" +
    "\uff56\073\uff56\076\uff56\102\uff56\103\uff56\104\uff56\106\uff56" +
    "\001\002\000\046\012\uff58\025\uff58\037\uff58\042\uff58\043" +
    "\uff58\046\uff58\050\uff58\051\uff58\057\uff58\061\uff58\064\uff58" +
    "\066\uff58\073\uff58\076\uff58\102\uff58\103\uff58\104\uff58\106" +
    "\uff58\001\002\000\046\012\uff57\025\uff57\037\uff57\042\uff57" +
    "\043\uff57\046\uff57\050\uff57\051\uff57\057\uff57\061\uff57\064" +
    "\uff57\066\uff57\073\uff57\076\uff57\102\uff57\103\uff57\104\uff57" +
    "\106\uff57\001\002\000\046\012\100\025\065\037\073\042" +
    "\064\043\074\046\101\050\076\051\063\057\067\061\102" +
    "\064\060\066\053\073\071\076\061\102\077\103\062\104" +
    "\044\106\070\001\002\000\056\013\uff62\022\uff62\031\uff62" +
    "\032\uff62\035\uff62\040\uff62\041\uff62\042\uff62\044\uff62\045" +
    "\uff62\047\uff62\050\uff62\053\uff62\055\uff62\056\uff62\060\uff62" +
    "\061\uff62\072\uff62\073\uff62\074\uff62\075\uff62\077\uff62\001" +
    "\002\000\004\056\202\001\002\000\124\002\uffed\006\uffed" +
    "\007\uffed\010\uffed\012\uffed\014\uffed\015\uffed\016\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\033\uffed" +
    "\035\uffed\037\uffed\042\uffed\043\uffed\046\uffed\050\uffed\051" +
    "\uffed\052\uffed\054\uffed\057\uffed\061\uffed\062\uffed\063\uffed" +
    "\064\uffed\066\uffed\070\uffed\071\uffed\073\uffed\076\uffed\100" +
    "\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed\106\uffed" +
    "\001\002\000\046\012\100\025\065\037\073\042\064\043" +
    "\074\046\101\050\076\051\063\057\067\061\102\064\060" +
    "\066\053\073\071\076\061\102\077\103\062\104\044\106" +
    "\070\001\002\000\050\012\100\025\065\037\073\042\064" +
    "\043\074\046\101\050\076\051\063\055\uff7b\057\067\061" +
    "\102\064\060\066\053\073\071\076\061\102\077\103\062" +
    "\104\044\106\070\001\002\000\076\004\uff47\005\uff47\011" +
    "\uff47\013\uff47\017\uff47\022\uff47\031\uff47\032\uff47\035\uff47" +
    "\036\uff47\037\uff47\040\uff47\041\uff47\042\uff47\043\uff47\044" +
    "\uff47\045\uff47\047\uff47\050\uff47\051\uff47\053\uff47\055\uff47" +
    "\056\uff47\060\uff47\061\uff47\072\uff47\073\uff47\074\uff47\075" +
    "\uff47\077\uff47\001\002\000\004\106\211\001\002\000\004" +
    "\106\210\001\002\000\076\004\uff4a\005\uff4a\011\uff4a\013" +
    "\uff4a\017\uff4a\022\uff4a\031\uff4a\032\uff4a\035\uff4a\036\uff4a" +
    "\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a\044\uff4a\045" +
    "\uff4a\047\uff4a\050\uff4a\051\uff4a\053\uff4a\055\uff4a\056\uff4a" +
    "\060\uff4a\061\uff4a\072\uff4a\073\uff4a\074\uff4a\075\uff4a\077" +
    "\uff4a\001\002\000\076\004\uff48\005\uff48\011\uff48\013\uff48" +
    "\017\uff48\022\uff48\031\uff48\032\uff48\035\uff48\036\uff48\037" +
    "\uff48\040\uff48\041\uff48\042\uff48\043\uff48\044\uff48\045\uff48" +
    "\047\uff48\050\uff48\051\uff48\053\uff48\055\uff48\056\uff48\060" +
    "\uff48\061\uff48\072\uff48\073\uff48\074\uff48\075\uff48\077\uff48" +
    "\001\002\000\006\013\uff7a\055\uff7a\001\002\000\006\013" +
    "\216\055\uff7c\001\002\000\004\055\215\001\002\000\076" +
    "\004\uff46\005\uff46\011\uff46\013\uff46\017\uff46\022\uff46\031" +
    "\uff46\032\uff46\035\uff46\036\uff46\037\uff46\040\uff46\041\uff46" +
    "\042\uff46\043\uff46\044\uff46\045\uff46\047\uff46\050\uff46\051" +
    "\uff46\053\uff46\055\uff46\056\uff46\060\uff46\061\uff46\072\uff46" +
    "\073\uff46\074\uff46\075\uff46\077\uff46\001\002\000\046\012" +
    "\100\025\065\037\073\042\064\043\074\046\101\050\076" +
    "\051\063\057\067\061\102\064\060\066\053\073\071\076" +
    "\061\102\077\103\062\104\044\106\070\001\002\000\006" +
    "\013\uff79\055\uff79\001\002\000\004\053\221\001\002\000" +
    "\076\004\uff49\005\uff49\011\uff49\013\uff49\017\uff49\022\uff49" +
    "\031\uff49\032\uff49\035\uff49\036\uff49\037\uff49\040\uff49\041" +
    "\uff49\042\uff49\043\uff49\044\uff49\045\uff49\047\uff49\050\uff49" +
    "\051\uff49\053\uff49\055\uff49\056\uff49\060\uff49\061\uff49\072" +
    "\uff49\073\uff49\074\uff49\075\uff49\077\uff49\001\002\000\046" +
    "\012\100\025\065\037\073\042\064\043\074\046\101\050" +
    "\076\051\063\057\067\061\102\064\060\066\053\073\071" +
    "\076\061\102\077\103\062\104\044\106\070\001\002\000" +
    "\016\013\uff78\035\uff78\047\uff78\053\uff78\055\uff78\056\uff78" +
    "\001\002\000\010\011\uffbb\036\131\056\uffbb\001\002\000" +
    "\006\011\226\056\uff97\001\002\000\004\037\233\001\002" +
    "\000\004\056\uff98\001\002\000\004\056\ufff0\001\002\000" +
    "\004\056\232\001\002\000\124\002\uffef\006\uffef\007\uffef" +
    "\010\uffef\012\uffef\014\uffef\015\uffef\016\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\033\uffef\035\uffef" +
    "\037\uffef\042\uffef\043\uffef\046\uffef\050\uffef\051\uffef\052" +
    "\uffef\054\uffef\057\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\066\uffef\070\uffef\071\uffef\073\uffef\076\uffef\100\uffef\101" +
    "\uffef\102\uffef\103\uffef\104\uffef\105\uffef\106\uffef\001\002" +
    "\000\050\012\100\025\065\037\073\042\064\043\074\046" +
    "\101\050\076\051\063\055\uff7b\057\067\061\102\064\060" +
    "\066\053\073\071\076\061\102\077\103\062\104\044\106" +
    "\070\001\002\000\004\055\235\001\002\000\004\056\uff96" +
    "\001\002\000\012\036\uffc8\055\uffc8\073\uffc8\106\uffc8\001" +
    "\002\000\014\036\uffc1\055\uffc1\061\114\073\uffc1\106\uffc1" +
    "\001\002\000\010\005\uffbb\036\131\056\uffbb\001\002\000" +
    "\006\005\243\056\uff99\001\002\000\004\056\ufff2\001\002" +
    "\000\046\012\100\025\065\037\073\042\064\043\074\046" +
    "\101\050\076\051\063\057\067\061\102\064\060\066\053" +
    "\073\071\076\061\102\077\103\062\104\044\106\070\001" +
    "\002\000\004\056\uff9a\001\002\000\004\056\246\001\002" +
    "\000\124\002\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\033\ufff1\035\ufff1\037\ufff1\042\ufff1\043" +
    "\ufff1\046\ufff1\050\ufff1\051\ufff1\052\ufff1\054\ufff1\057\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\066\ufff1\070\ufff1\071" +
    "\ufff1\073\ufff1\076\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1" +
    "\104\ufff1\105\ufff1\106\ufff1\001\002\000\004\035\250\001" +
    "\002\000\012\006\uffea\026\uffea\033\uffea\105\uffea\001\002" +
    "\000\012\006\032\026\034\033\035\105\030\001\002\000" +
    "\020\006\032\026\034\030\uffe2\033\035\052\uffe2\065\261" +
    "\105\263\001\002\000\004\106\255\001\002\000\020\006" +
    "\uffe6\026\uffe6\030\uffe6\033\uffe6\052\uffe6\065\uffe6\105\uffe6" +
    "\001\002\000\006\036\131\056\uffbb\001\002\000\004\056" +
    "\257\001\002\000\020\006\uffe4\026\uffe4\030\uffe4\033\uffe4" +
    "\052\uffe4\065\uffe4\105\uffe4\001\002\000\012\030\uffde\052" +
    "\uffde\065\uffde\105\uffde\001\002\000\004\105\u0125\001\002" +
    "\000\020\006\uffe5\026\uffe5\030\uffe5\033\uffe5\052\uffe5\065" +
    "\uffe5\105\uffe5\001\002\000\006\037\uffdd\061\uffc4\001\002" +
    "\000\012\030\uffe3\052\uffe3\065\261\105\301\001\002\000" +
    "\012\030\uffe1\052\uffe1\065\uffe1\105\uffe1\001\002\000\012" +
    "\030\uffdf\052\uffdf\065\uffdf\105\uffdf\001\002\000\006\030" +
    "\uffe9\052\uffe9\001\002\000\006\030\011\052\uffd7\001\002" +
    "\000\006\030\uffd6\052\uffd6\001\002\000\006\030\011\052" +
    "\uffd8\001\002\000\006\030\uffd4\052\uffd4\001\002\000\004" +
    "\052\uffe8\001\002\000\004\052\276\001\002\000\004\056" +
    "\277\001\002\000\026\002\uffe7\006\uffe7\014\uffe7\024\uffe7" +
    "\026\uffe7\030\uffe7\033\uffe7\062\uffe7\063\uffe7\105\uffe7\001" +
    "\002\000\006\030\uffd5\052\uffd5\001\002\000\004\037\uffdd" +
    "\001\002\000\012\030\uffe0\052\uffe0\065\uffe0\105\uffe0\001" +
    "\002\000\004\037\304\001\002\000\014\006\032\026\034" +
    "\033\035\055\uffa0\105\030\001\002\000\006\073\364\106" +
    "\uff9b\001\002\000\006\013\u0120\055\uffa1\001\002\000\006" +
    "\013\uff9f\055\uff9f\001\002\000\004\055\311\001\002\000" +
    "\004\035\uffdc\001\002\000\004\035\313\001\002\000\114" +
    "\006\uffeb\007\343\010\333\012\100\014\uffeb\015\320\016" +
    "\321\023\337\025\065\026\uffeb\027\345\033\uffeb\035\326" +
    "\037\073\042\064\043\074\046\101\050\076\051\063\052" +
    "\uffb3\054\323\057\067\061\102\062\015\064\060\066\053" +
    "\070\350\071\316\073\071\076\061\100\327\101\317\102" +
    "\077\103\062\104\044\105\uffeb\106\070\001\002\000\114" +
    "\006\uffa7\007\uffa7\010\uffa7\012\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\023\uffa7\025\uffa7\026\uffa7\027\uffa7\033\uffa7\035\uffa7" +
    "\037\uffa7\042\uffa7\043\uffa7\046\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\054\uffa7\057\uffa7\061\uffa7\062\uffa7\064\uffa7\066\uffa7" +
    "\070\uffa7\071\uffa7\073\uffa7\076\uffa7\100\uffa7\101\uffa7\102" +
    "\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7\001\002\000\114" +
    "\006\uffa6\007\uffa6\010\uffa6\012\uffa6\014\uffa6\015\uffa6\016" +
    "\uffa6\023\uffa6\025\uffa6\026\uffa6\027\uffa6\033\uffa6\035\uffa6" +
    "\037\uffa6\042\uffa6\043\uffa6\046\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\054\uffa6\057\uffa6\061\uffa6\062\uffa6\064\uffa6\066\uffa6" +
    "\070\uffa6\071\uffa6\073\uffa6\076\uffa6\100\uffa6\101\uffa6\102" +
    "\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\001\002\000\046" +
    "\012\uff90\025\uff90\037\uff90\042\uff90\043\uff90\046\uff90\050" +
    "\uff90\051\uff90\057\uff90\061\uff90\064\uff90\066\uff90\073\uff90" +
    "\076\uff90\102\uff90\103\uff90\104\uff90\106\uff90\001\002\000" +
    "\046\012\100\025\065\037\073\042\064\043\074\046\101" +
    "\050\076\051\063\057\067\061\102\064\060\066\053\073" +
    "\071\076\061\102\077\103\062\104\044\106\070\001\002" +
    "\000\004\056\u0119\001\002\000\004\047\u0111\001\002\000" +
    "\114\006\uffa5\007\uffa5\010\uffa5\012\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\023\uffa5\025\uffa5\026\uffa5\027\uffa5\033\uffa5\035" +
    "\uffa5\037\uffa5\042\uffa5\043\uffa5\046\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\054\uffa5\057\uffa5\061\uffa5\062\uffa5\064\uffa5\066" +
    "\uffa5\070\uffa5\071\uffa5\073\uffa5\076\uffa5\100\uffa5\101\uffa5" +
    "\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\001\002\000" +
    "\050\012\100\025\065\037\073\042\064\043\074\046\101" +
    "\050\076\051\063\056\u010f\057\067\061\102\064\060\066" +
    "\053\073\071\076\061\102\077\103\062\104\044\106\070" +
    "\001\002\000\114\006\uffa4\007\uffa4\010\uffa4\012\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\023\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\033\uffa4\035\uffa4\037\uffa4\042\uffa4\043\uffa4\046\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\054\uffa4\057\uffa4\061\uffa4\062\uffa4" +
    "\064\uffa4\066\uffa4\070\uffa4\071\uffa4\073\uffa4\076\uffa4\100" +
    "\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4" +
    "\001\002\000\114\006\uffab\007\uffab\010\uffab\012\uffab\014" +
    "\uffab\015\uffab\016\uffab\023\uffab\025\uffab\026\uffab\027\uffab" +
    "\033\uffab\035\uffab\037\uffab\042\uffab\043\uffab\046\uffab\050" +
    "\uffab\051\uffab\052\uffab\054\uffab\057\uffab\061\uffab\062\uffab" +
    "\064\uffab\066\uffab\070\uffab\071\uffab\073\uffab\076\uffab\100" +
    "\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab\106\uffab" +
    "\001\002\000\114\006\uffb7\007\uffb7\010\uffb7\012\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\023\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\033\uffb7\035\uffb7\037\uffb7\042\uffb7\043\uffb7\046\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\054\uffb7\057\uffb7\061\uffb7\062\uffb7" +
    "\064\uffb7\066\uffb7\070\uffb7\071\uffb7\073\uffb7\076\uffb7\100" +
    "\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7" +
    "\001\002\000\046\012\100\025\065\037\073\042\064\043" +
    "\074\046\101\050\076\051\063\057\067\061\102\064\060" +
    "\066\053\073\071\076\061\102\077\103\062\104\044\106" +
    "\070\001\002\000\114\006\uffeb\007\343\010\333\012\100" +
    "\014\uffeb\015\320\016\321\023\337\025\065\026\uffeb\027" +
    "\345\033\uffeb\035\326\037\073\042\064\043\074\046\101" +
    "\050\076\051\063\052\uffb4\054\323\057\067\061\102\062" +
    "\015\064\060\066\053\070\350\071\316\073\071\076\061" +
    "\100\327\101\317\102\077\103\062\104\044\105\uffeb\106" +
    "\070\001\002\000\114\006\uffa3\007\uffa3\010\uffa3\012\uffa3" +
    "\014\uffa3\015\uffa3\016\uffa3\023\uffa3\025\uffa3\026\uffa3\027" +
    "\uffa3\033\uffa3\035\uffa3\037\uffa3\042\uffa3\043\uffa3\046\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\054\uffa3\057\uffa3\061\uffa3\062" +
    "\uffa3\064\uffa3\066\uffa3\070\uffa3\071\uffa3\073\uffa3\076\uffa3" +
    "\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106" +
    "\uffa3\001\002\000\114\006\uffae\007\uffae\010\uffae\012\uffae" +
    "\014\uffae\015\uffae\016\uffae\023\uffae\025\uffae\026\uffae\027" +
    "\uffae\033\uffae\035\uffae\037\uffae\042\uffae\043\uffae\046\uffae" +
    "\050\uffae\051\uffae\052\uffae\054\uffae\057\uffae\061\uffae\062" +
    "\uffae\064\uffae\066\uffae\070\uffae\071\uffae\073\uffae\076\uffae" +
    "\100\uffae\101\uffae\102\uffae\103\uffae\104\uffae\105\uffae\106" +
    "\uffae\001\002\000\004\034\u0103\001\002\000\114\006\uffac" +
    "\007\uffac\010\uffac\012\uffac\014\uffac\015\uffac\016\uffac\023" +
    "\uffac\025\uffac\026\uffac\027\uffac\033\uffac\035\uffac\037\uffac" +
    "\042\uffac\043\uffac\046\uffac\050\uffac\051\uffac\052\uffac\054" +
    "\uffac\057\uffac\061\uffac\062\uffac\064\uffac\066\uffac\070\uffac" +
    "\071\uffac\073\uffac\076\uffac\100\uffac\101\uffac\102\uffac\103" +
    "\uffac\104\uffac\105\uffac\106\uffac\001\002\000\004\056\u0102" +
    "\001\002\000\004\052\u0101\001\002\000\004\037\375\001" +
    "\002\000\114\006\uffaa\007\uffaa\010\uffaa\012\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\023\uffaa\025\uffaa\026\uffaa\027\uffaa\033" +
    "\uffaa\035\uffaa\037\uffaa\042\uffaa\043\uffaa\046\uffaa\050\uffaa" +
    "\051\uffaa\052\uffaa\054\uffaa\057\uffaa\061\uffaa\062\uffaa\064" +
    "\uffaa\066\uffaa\070\uffaa\071\uffaa\073\uffaa\076\uffaa\100\uffaa" +
    "\101\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa\001" +
    "\002\000\114\006\uffb0\007\uffb0\010\uffb0\012\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\023\uffb0\025\uffb0\026\uffb0\027\uffb0\033" +
    "\uffb0\035\uffb0\037\uffb0\042\uffb0\043\uffb0\046\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\054\uffb0\057\uffb0\061\uffb0\062\uffb0\064" +
    "\uffb0\066\uffb0\070\uffb0\071\uffb0\073\uffb0\076\uffb0\100\uffb0" +
    "\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\001" +
    "\002\000\114\006\uffb2\007\uffb2\010\uffb2\012\uffb2\014\uffb2" +
    "\015\uffb2\016\uffb2\023\uffb2\025\uffb2\026\uffb2\027\uffb2\033" +
    "\uffb2\035\uffb2\037\uffb2\042\uffb2\043\uffb2\046\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\054\uffb2\057\uffb2\061\uffb2\062\uffb2\064" +
    "\uffb2\066\uffb2\070\uffb2\071\uffb2\073\uffb2\076\uffb2\100\uffb2" +
    "\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\001" +
    "\002\000\004\056\374\001\002\000\114\006\uffaf\007\uffaf" +
    "\010\uffaf\012\uffaf\014\uffaf\015\uffaf\016\uffaf\023\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\033\uffaf\035\uffaf\037\uffaf\042\uffaf" +
    "\043\uffaf\046\uffaf\050\uffaf\051\uffaf\052\uffaf\054\uffaf\057" +
    "\uffaf\061\uffaf\062\uffaf\064\uffaf\066\uffaf\070\uffaf\071\uffaf" +
    "\073\uffaf\076\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104" +
    "\uffaf\105\uffaf\106\uffaf\001\002\000\004\037\uff8d\001\002" +
    "\000\114\006\uffa8\007\uffa8\010\uffa8\012\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\023\uffa8\025\uffa8\026\uffa8\027\uffa8\033\uffa8" +
    "\035\uffa8\037\uffa8\042\uffa8\043\uffa8\046\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\054\uffa8\057\uffa8\061\uffa8\062\uffa8\064\uffa8" +
    "\066\uffa8\070\uffa8\071\uffa8\073\uffa8\076\uffa8\100\uffa8\101" +
    "\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\001\002" +
    "\000\114\006\uffa2\007\uffa2\010\uffa2\012\uffa2\014\uffa2\015" +
    "\uffa2\016\uffa2\023\uffa2\025\uffa2\026\uffa2\027\uffa2\033\uffa2" +
    "\035\uffa2\037\uffa2\042\uffa2\043\uffa2\046\uffa2\050\uffa2\051" +
    "\uffa2\052\uffa2\054\uffa2\057\uffa2\061\uffa2\062\uffa2\064\uffa2" +
    "\066\uffa2\070\uffa2\071\uffa2\073\uffa2\076\uffa2\100\uffa2\101" +
    "\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\001\002" +
    "\000\046\012\100\025\065\037\073\042\064\043\074\046" +
    "\101\050\076\051\063\057\067\061\102\064\060\066\053" +
    "\073\071\076\061\102\077\103\062\104\044\106\070\001" +
    "\002\000\114\006\uffa9\007\uffa9\010\uffa9\012\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\023\uffa9\025\uffa9\026\uffa9\027\uffa9\033" +
    "\uffa9\035\uffa9\037\uffa9\042\uffa9\043\uffa9\046\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\054\uffa9\057\uffa9\061\uffa9\062\uffa9\064" +
    "\uffa9\066\uffa9\070\uffa9\071\uffa9\073\uffa9\076\uffa9\100\uffa9" +
    "\101\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\001" +
    "\002\000\004\035\uff95\001\002\000\004\035\326\001\002" +
    "\000\116\006\uff94\007\uff94\010\uff94\012\uff94\014\uff94\015" +
    "\uff94\016\uff94\020\uff94\023\uff94\025\uff94\026\uff94\027\uff94" +
    "\033\uff94\035\uff94\037\uff94\042\uff94\043\uff94\046\uff94\050" +
    "\uff94\051\uff94\052\uff94\054\uff94\057\uff94\061\uff94\062\uff94" +
    "\064\uff94\066\uff94\070\uff94\071\uff94\073\uff94\076\uff94\100" +
    "\uff94\101\uff94\102\uff94\103\uff94\104\uff94\105\uff94\106\uff94" +
    "\001\002\000\116\006\uff91\007\uff91\010\uff91\012\uff91\014" +
    "\uff91\015\uff91\016\uff91\020\357\023\uff91\025\uff91\026\uff91" +
    "\027\uff91\033\uff91\035\uff91\037\uff91\042\uff91\043\uff91\046" +
    "\uff91\050\uff91\051\uff91\052\uff91\054\uff91\057\uff91\061\uff91" +
    "\062\uff91\064\uff91\066\uff91\070\uff91\071\uff91\073\uff91\076" +
    "\uff91\100\uff91\101\uff91\102\uff91\103\uff91\104\uff91\105\uff91" +
    "\106\uff91\001\002\000\114\006\uff93\007\uff93\010\uff93\012" +
    "\uff93\014\uff93\015\uff93\016\uff93\023\uff93\025\uff93\026\uff93" +
    "\027\uff93\033\uff93\035\uff93\037\uff93\042\uff93\043\uff93\046" +
    "\uff93\050\uff93\051\uff93\052\uff93\054\uff93\057\uff93\061\uff93" +
    "\062\uff93\064\uff93\066\uff93\070\uff93\071\uff93\073\uff93\076" +
    "\uff93\100\uff93\101\uff93\102\uff93\103\uff93\104\uff93\105\uff93" +
    "\106\uff93\001\002\000\004\035\326\001\002\000\114\006" +
    "\uff92\007\uff92\010\uff92\012\uff92\014\uff92\015\uff92\016\uff92" +
    "\023\uff92\025\uff92\026\uff92\027\uff92\033\uff92\035\uff92\037" +
    "\uff92\042\uff92\043\uff92\046\uff92\050\uff92\051\uff92\052\uff92" +
    "\054\uff92\057\uff92\061\uff92\062\uff92\064\uff92\066\uff92\070" +
    "\uff92\071\uff92\073\uff92\076\uff92\100\uff92\101\uff92\102\uff92" +
    "\103\uff92\104\uff92\105\uff92\106\uff92\001\002\000\004\037" +
    "\362\001\002\000\012\006\032\026\034\033\035\105\030" +
    "\001\002\000\006\073\364\106\uff9b\001\002\000\004\106" +
    "\uff9c\001\002\000\004\106\366\001\002\000\004\011\367" +
    "\001\002\000\046\012\100\025\065\037\073\042\064\043" +
    "\074\046\101\050\076\051\063\057\067\061\102\064\060" +
    "\066\053\073\071\076\061\102\077\103\062\104\044\106" +
    "\070\001\002\000\004\055\371\001\002\000\004\035\uff8c" +
    "\001\002\000\004\035\326\001\002\000\114\006\uff8b\007" +
    "\uff8b\010\uff8b\012\uff8b\014\uff8b\015\uff8b\016\uff8b\023\uff8b" +
    "\025\uff8b\026\uff8b\027\uff8b\033\uff8b\035\uff8b\037\uff8b\042" +
    "\uff8b\043\uff8b\046\uff8b\050\uff8b\051\uff8b\052\uff8b\054\uff8b" +
    "\057\uff8b\061\uff8b\062\uff8b\064\uff8b\066\uff8b\070\uff8b\071" +
    "\uff8b\073\uff8b\076\uff8b\100\uff8b\101\uff8b\102\uff8b\103\uff8b" +
    "\104\uff8b\105\uff8b\106\uff8b\001\002\000\114\006\uff8a\007" +
    "\uff8a\010\uff8a\012\uff8a\014\uff8a\015\uff8a\016\uff8a\023\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\033\uff8a\035\uff8a\037\uff8a\042" +
    "\uff8a\043\uff8a\046\uff8a\050\uff8a\051\uff8a\052\uff8a\054\uff8a" +
    "\057\uff8a\061\uff8a\062\uff8a\064\uff8a\066\uff8a\070\uff8a\071" +
    "\uff8a\073\uff8a\076\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a" +
    "\104\uff8a\105\uff8a\106\uff8a\001\002\000\046\012\100\025" +
    "\065\037\073\042\064\043\074\046\101\050\076\051\063" +
    "\057\067\061\102\064\060\066\053\073\071\076\061\102" +
    "\077\103\062\104\044\106\070\001\002\000\004\055\377" +
    "\001\002\000\004\056\u0100\001\002\000\114\006\uff87\007" +
    "\uff87\010\uff87\012\uff87\014\uff87\015\uff87\016\uff87\023\uff87" +
    "\025\uff87\026\uff87\027\uff87\033\uff87\035\uff87\037\uff87\042" +
    "\uff87\043\uff87\046\uff87\050\uff87\051\uff87\052\uff87\054\uff87" +
    "\057\uff87\061\uff87\062\uff87\064\uff87\066\uff87\070\uff87\071" +
    "\uff87\073\uff87\076\uff87\100\uff87\101\uff87\102\uff87\103\uff87" +
    "\104\uff87\105\uff87\106\uff87\001\002\000\012\030\uffdb\052" +
    "\uffdb\065\uffdb\105\uffdb\001\002\000\114\006\uffad\007\uffad" +
    "\010\uffad\012\uffad\014\uffad\015\uffad\016\uffad\023\uffad\025" +
    "\uffad\026\uffad\027\uffad\033\uffad\035\uffad\037\uffad\042\uffad" +
    "\043\uffad\046\uffad\050\uffad\051\uffad\052\uffad\054\uffad\057" +
    "\uffad\061\uffad\062\uffad\064\uffad\066\uffad\070\uffad\071\uffad" +
    "\073\uffad\076\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104" +
    "\uffad\105\uffad\106\uffad\001\002\000\046\012\100\025\065" +
    "\037\073\042\064\043\074\046\101\050\076\051\063\057" +
    "\067\061\102\064\060\066\053\073\071\076\061\102\077" +
    "\103\062\104\044\106\070\001\002\000\004\056\u0105\001" +
    "\002\000\114\006\uff83\007\uff83\010\uff83\012\uff83\014\uff83" +
    "\015\uff83\016\uff83\023\uff83\025\uff83\026\uff83\027\uff83\033" +
    "\uff83\035\uff83\037\uff83\042\uff83\043\uff83\046\uff83\050\uff83" +
    "\051\uff83\052\uff83\054\uff83\057\uff83\061\uff83\062\uff83\064" +
    "\uff83\066\uff83\070\uff83\071\uff83\073\uff83\076\uff83\100\uff83" +
    "\101\uff83\102\uff83\103\uff83\104\uff83\105\uff83\106\uff83\001" +
    "\002\000\114\006\uffb1\007\uffb1\010\uffb1\012\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\023\uffb1\025\uffb1\026\uffb1\027\uffb1\033" +
    "\uffb1\035\uffb1\037\uffb1\042\uffb1\043\uffb1\046\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\054\uffb1\057\uffb1\061\uffb1\062\uffb1\064" +
    "\uffb1\066\uffb1\070\uffb1\071\uffb1\073\uffb1\076\uffb1\100\uffb1" +
    "\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\001" +
    "\002\000\006\011\226\056\uff97\001\002\000\004\056\u0109" +
    "\001\002\000\114\006\uff86\007\uff86\010\uff86\012\uff86\014" +
    "\uff86\015\uff86\016\uff86\023\uff86\025\uff86\026\uff86\027\uff86" +
    "\033\uff86\035\uff86\037\uff86\042\uff86\043\uff86\046\uff86\050" +
    "\uff86\051\uff86\052\uff86\054\uff86\057\uff86\061\uff86\062\uff86" +
    "\064\uff86\066\uff86\070\uff86\071\uff86\073\uff86\076\uff86\100" +
    "\uff86\101\uff86\102\uff86\103\uff86\104\uff86\105\uff86\106\uff86" +
    "\001\002\000\114\006\uffeb\007\343\010\333\012\100\014" +
    "\uffeb\015\320\016\321\023\337\025\065\026\uffeb\027\345" +
    "\033\uffeb\035\326\037\073\042\064\043\074\046\101\050" +
    "\076\051\063\052\uffb3\054\323\057\067\061\102\062\015" +
    "\064\060\066\053\070\350\071\316\073\071\076\061\100" +
    "\327\101\317\102\077\103\062\104\044\105\uffeb\106\070" +
    "\001\002\000\004\052\uffb6\001\002\000\004\052\u010d\001" +
    "\002\000\116\006\uffb5\007\uffb5\010\uffb5\012\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\020\uffb5\023\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\033\uffb5\035\uffb5\037\uffb5\042\uffb5\043\uffb5\046\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\054\uffb5\057\uffb5\061\uffb5\062" +
    "\uffb5\064\uffb5\066\uffb5\070\uffb5\071\uffb5\073\uffb5\076\uffb5" +
    "\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106" +
    "\uffb5\001\002\000\004\056\u0110\001\002\000\114\006\uff85" +
    "\007\uff85\010\uff85\012\uff85\014\uff85\015\uff85\016\uff85\023" +
    "\uff85\025\uff85\026\uff85\027\uff85\033\uff85\035\uff85\037\uff85" +
    "\042\uff85\043\uff85\046\uff85\050\uff85\051\uff85\052\uff85\054" +
    "\uff85\057\uff85\061\uff85\062\uff85\064\uff85\066\uff85\070\uff85" +
    "\071\uff85\073\uff85\076\uff85\100\uff85\101\uff85\102\uff85\103" +
    "\uff85\104\uff85\105\uff85\106\uff85\001\002\000\114\006\uff84" +
    "\007\uff84\010\uff84\012\uff84\014\uff84\015\uff84\016\uff84\023" +
    "\uff84\025\uff84\026\uff84\027\uff84\033\uff84\035\uff84\037\uff84" +
    "\042\uff84\043\uff84\046\uff84\050\uff84\051\uff84\052\uff84\054" +
    "\uff84\057\uff84\061\uff84\062\uff84\064\uff84\066\uff84\070\uff84" +
    "\071\uff84\073\uff84\076\uff84\100\uff84\101\uff84\102\uff84\103" +
    "\uff84\104\uff84\105\uff84\106\uff84\001\002\000\050\012\100" +
    "\021\u0114\025\065\037\073\042\064\043\074\046\101\050" +
    "\076\051\063\057\067\061\102\064\060\066\053\073\071" +
    "\076\061\102\077\103\062\104\044\106\070\001\002\000" +
    "\006\047\u0116\056\u0117\001\002\000\006\047\uff81\056\uff81" +
    "\001\002\000\006\047\uff7e\056\uff7e\001\002\000\006\047" +
    "\uff7f\056\uff7f\001\002\000\050\012\100\021\u0114\025\065" +
    "\037\073\042\064\043\074\046\101\050\076\051\063\057" +
    "\067\061\102\064\060\066\053\073\071\076\061\102\077" +
    "\103\062\104\044\106\070\001\002\000\114\006\uff82\007" +
    "\uff82\010\uff82\012\uff82\014\uff82\015\uff82\016\uff82\023\uff82" +
    "\025\uff82\026\uff82\027\uff82\033\uff82\035\uff82\037\uff82\042" +
    "\uff82\043\uff82\046\uff82\050\uff82\051\uff82\052\uff82\054\uff82" +
    "\057\uff82\061\uff82\062\uff82\064\uff82\066\uff82\070\uff82\071" +
    "\uff82\073\uff82\076\uff82\100\uff82\101\uff82\102\uff82\103\uff82" +
    "\104\uff82\105\uff82\106\uff82\001\002\000\006\047\uff80\056" +
    "\uff80\001\002\000\114\006\uff89\007\uff89\010\uff89\012\uff89" +
    "\014\uff89\015\uff89\016\uff89\023\uff89\025\uff89\026\uff89\027" +
    "\uff89\033\uff89\035\uff89\037\uff89\042\uff89\043\uff89\046\uff89" +
    "\050\uff89\051\uff89\052\uff89\054\uff89\057\uff89\061\uff89\062" +
    "\uff89\064\uff89\066\uff89\070\uff89\071\uff89\073\uff89\076\uff89" +
    "\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105\uff89\106" +
    "\uff89\001\002\000\004\056\u011b\001\002\000\114\006\uff88" +
    "\007\uff88\010\uff88\012\uff88\014\uff88\015\uff88\016\uff88\023" +
    "\uff88\025\uff88\026\uff88\027\uff88\033\uff88\035\uff88\037\uff88" +
    "\042\uff88\043\uff88\046\uff88\050\uff88\051\uff88\052\uff88\054" +
    "\uff88\057\uff88\061\uff88\062\uff88\064\uff88\066\uff88\070\uff88" +
    "\071\uff88\073\uff88\076\uff88\100\uff88\101\uff88\102\uff88\103" +
    "\uff88\104\uff88\105\uff88\106\uff88\001\002\000\046\012\100" +
    "\025\065\037\073\042\064\043\074\046\101\050\076\051" +
    "\063\057\067\061\102\064\060\066\053\073\071\076\061" +
    "\102\077\103\062\104\044\106\070\001\002\000\004\035" +
    "\uff8f\001\002\000\004\035\326\001\002\000\114\006\uff8e" +
    "\007\uff8e\010\uff8e\012\uff8e\014\uff8e\015\uff8e\016\uff8e\023" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\033\uff8e\035\uff8e\037\uff8e" +
    "\042\uff8e\043\uff8e\046\uff8e\050\uff8e\051\uff8e\052\uff8e\054" +
    "\uff8e\057\uff8e\061\uff8e\062\uff8e\064\uff8e\066\uff8e\070\uff8e" +
    "\071\uff8e\073\uff8e\076\uff8e\100\uff8e\101\uff8e\102\uff8e\103" +
    "\uff8e\104\uff8e\105\uff8e\106\uff8e\001\002\000\012\006\032" +
    "\026\034\033\035\105\030\001\002\000\006\013\uff9e\055" +
    "\uff9e\001\002\000\004\106\u0123\001\002\000\010\013\uffbb" +
    "\036\131\055\uffbb\001\002\000\006\013\uff9d\055\uff9d\001" +
    "\002\000\004\037\uffda\001\002\000\004\037\u0127\001\002" +
    "\000\004\055\u0128\001\002\000\004\035\u0129\001\002\000" +
    "\114\006\uffeb\007\343\010\333\012\100\014\uffeb\015\320" +
    "\016\321\023\337\025\065\026\uffeb\027\345\033\uffeb\035" +
    "\326\037\073\042\064\043\074\046\101\050\076\051\063" +
    "\052\uffb3\054\323\057\067\061\102\062\015\064\060\066" +
    "\053\070\350\071\316\073\071\076\061\100\327\101\317" +
    "\102\077\103\062\104\044\105\uffeb\106\070\001\002\000" +
    "\004\052\u012b\001\002\000\012\030\uffd9\052\uffd9\065\uffd9" +
    "\105\uffd9\001\002\000\014\006\032\026\034\033\035\067" +
    "\u012f\105\030\001\002\000\006\073\uffc3\106\uffc3\001\002" +
    "\000\006\073\364\106\uff9b\001\002\000\006\073\uffc2\106" +
    "\uffc2\001\002\000\004\106\u0131\001\002\000\004\037\uffd3" +
    "\001\002\000\004\037\u0133\001\002\000\014\006\032\026" +
    "\034\033\035\055\uffa0\105\030\001\002\000\004\055\u0135" +
    "\001\002\000\004\035\uffd2\001\002\000\004\035\u0137\001" +
    "\002\000\114\006\uffeb\007\343\010\333\012\100\014\uffeb" +
    "\015\320\016\321\023\337\025\065\026\uffeb\027\345\033" +
    "\uffeb\035\326\037\073\042\064\043\074\046\101\050\076" +
    "\051\063\052\uffb3\054\323\057\067\061\102\062\015\064" +
    "\060\066\053\070\350\071\316\073\071\076\061\100\327" +
    "\101\317\102\077\103\062\104\044\105\uffeb\106\070\001" +
    "\002\000\004\052\uffd1\001\002\000\004\052\u013a\001\002" +
    "\000\030\002\uffd0\006\uffd0\014\uffd0\024\uffd0\026\uffd0\030" +
    "\uffd0\033\uffd0\052\uffd0\062\uffd0\063\uffd0\105\uffd0\001\002" +
    "\000\004\011\u0141\001\002\000\004\106\u013d\001\002\000" +
    "\006\036\131\056\uffbb\001\002\000\004\056\ufff4\001\002" +
    "\000\004\056\u0140\001\002\000\026\002\ufff3\006\ufff3\014" +
    "\ufff3\024\ufff3\026\ufff3\030\ufff3\033\ufff3\062\ufff3\063\ufff3" +
    "\105\ufff3\001\002\000\014\006\032\026\034\033\035\067" +
    "\u012f\105\030\001\002\000\004\106\u0143\001\002\000\004" +
    "\037\uffcf\001\002\000\004\037\u0145\001\002\000\014\006" +
    "\032\026\034\033\035\055\uffa0\105\030\001\002\000\004" +
    "\055\u0147\001\002\000\004\056\uffce\001\002\000\004\056" +
    "\u0149\001\002\000\026\002\uffcd\006\uffcd\014\uffcd\024\uffcd" +
    "\026\uffcd\030\uffcd\033\uffcd\062\uffcd\063\uffcd\105\uffcd\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\006\003\003\123\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\016\012\030\015\031\005" +
    "\032\020\033\007\034\013\035\022\073\016\001\001\000" +
    "\002\001\001\000\006\076\026\077\u013b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\076" +
    "\026\077\024\100\030\102\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\012\030\023\031\005\032\020\033\007\034\013" +
    "\035\022\073\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\115\021\236\022\235\001" +
    "\001\000\002\001\001\000\006\015\115\021\114\001\001" +
    "\000\002\001\001\000\004\076\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\025\074\053\071\055\065\056\056\057\055\060" +
    "\054\061\051\062\050\063\045\064\044\065\042\066\040" +
    "\067\041\070\047\071\046\072\053\001\001\000\004\027" +
    "\176\001\001\000\002\001\001\000\004\026\171\001\001" +
    "\000\002\001\001\000\004\024\164\001\001\000\004\023" +
    "\155\001\001\000\002\001\001\000\004\053\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\200\001\001\000\002\001\001\000\004\154\144" +
    "\001\001\000\004\153\140\001\001\000\002\001\001\000" +
    "\014\025\074\053\071\067\137\070\047\071\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\074\053\071\067\120\070\047\071" +
    "\046\001\001\000\014\025\074\053\071\067\117\070\047" +
    "\071\046\001\001\000\050\025\074\053\071\055\107\056" +
    "\056\057\055\060\054\061\051\062\050\063\045\064\044" +
    "\065\042\066\040\067\041\070\047\071\046\076\026\077" +
    "\024\100\105\102\106\001\001\000\002\001\001\000\014" +
    "\025\074\053\071\067\104\070\047\071\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\074\053\071\067\102\070\047\071" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\115\021\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\074" +
    "\053\071\067\112\070\047\071\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\025\074\053\071\067\122\070\047\071\046" +
    "\076\026\077\024\100\123\101\124\102\125\001\001\000" +
    "\002\001\001\000\006\015\115\021\114\001\001\000\010" +
    "\054\131\104\127\105\126\001\001\000\002\001\001\000" +
    "\004\054\135\001\001\000\002\001\001\000\042\025\074" +
    "\053\071\055\065\056\056\057\055\060\054\061\051\062" +
    "\050\063\045\064\044\065\042\066\040\067\041\070\047" +
    "\071\046\072\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\025\074\053\071\057\143\060\054\061\051\062\050" +
    "\063\045\064\044\065\042\066\040\067\142\070\047\071" +
    "\046\001\001\000\002\001\001\000\004\154\144\001\001" +
    "\000\002\001\001\000\032\025\074\053\071\060\146\061" +
    "\051\062\050\063\045\064\044\065\042\066\040\067\142" +
    "\070\047\071\046\001\001\000\002\001\001\000\030\025" +
    "\074\053\071\061\150\062\050\063\045\064\044\065\042" +
    "\066\040\067\142\070\047\071\046\001\001\000\002\001" +
    "\001\000\026\025\074\053\071\062\152\063\045\064\044" +
    "\065\042\066\040\067\142\070\047\071\046\001\001\000" +
    "\002\001\001\000\024\025\074\053\071\063\154\064\044" +
    "\065\042\066\040\067\142\070\047\071\046\001\001\000" +
    "\004\023\155\001\001\000\022\025\074\053\071\064\160" +
    "\065\042\066\040\067\142\070\047\071\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\025\074\053\071\065\166\066\040\067\142\070\047" +
    "\071\046\001\001\000\002\001\001\000\004\026\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\025\074" +
    "\053\071\066\172\067\142\070\047\071\046\001\001\000" +
    "\004\027\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\074\053\071\067\177\070" +
    "\047\071\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\025\074\053\071\055\217\056" +
    "\056\057\055\060\054\061\051\062\050\063\045\064\044" +
    "\065\042\066\040\067\041\070\047\071\046\001\001\000" +
    "\044\025\074\053\071\055\211\056\056\057\055\060\054" +
    "\061\051\062\050\063\045\064\044\065\042\066\040\067" +
    "\041\070\047\071\046\115\213\116\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\025\074\053" +
    "\071\055\216\056\056\057\055\060\054\061\051\062\050" +
    "\063\045\064\044\065\042\066\040\067\041\070\047\071" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\025\074\053\071\055\222\056\056\057" +
    "\055\060\054\061\051\062\050\063\045\064\044\065\042" +
    "\066\040\067\041\070\047\071\046\001\001\000\002\001" +
    "\001\000\010\054\131\104\224\105\126\001\001\000\006" +
    "\106\227\107\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\126\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\025\074\053\071\055\211\056\056\057" +
    "\055\060\054\061\051\062\050\063\045\064\044\065\042" +
    "\066\040\067\041\070\047\071\046\115\233\116\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\116\001\001\000\010\054\131\104\240\105" +
    "\126\001\001\000\004\074\241\001\001\000\004\125\244" +
    "\001\001\000\040\025\074\053\071\055\243\056\056\057" +
    "\055\060\054\061\051\062\050\063\045\064\044\065\042" +
    "\066\040\067\041\070\047\071\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\130\250\001\001\000\016\010\253\076\026\077" +
    "\024\100\105\102\252\112\251\001\001\000\026\006\265" +
    "\007\257\010\261\011\264\076\026\077\024\100\105\102" +
    "\252\113\266\114\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\054\131\104\255\105\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\133\302\001\001\000" +
    "\010\006\265\007\257\011\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\131\267\001\001\000\012\012" +
    "\270\073\272\110\273\111\271\001\001\000\002\001\001" +
    "\000\006\012\277\073\272\001\001\000\002\001\001\000" +
    "\004\132\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\133\302\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\075\306" +
    "\076\026\077\024\100\123\101\304\102\125\121\307\122" +
    "\305\001\001\000\004\020\u0121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\134\311\001" +
    "\001\000\002\001\001\000\104\016\012\025\074\034\340" +
    "\035\343\036\333\037\337\040\324\041\350\042\345\043" +
    "\313\044\314\045\321\046\323\047\346\050\330\051\331" +
    "\052\341\053\071\055\334\056\056\057\055\060\054\061" +
    "\051\062\050\063\045\064\044\065\042\066\040\067\041" +
    "\070\047\071\046\117\335\120\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\147\u011b\001\001\000\014" +
    "\025\074\053\071\067\u0119\070\047\071\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\025\074\053\071\055\u010d\056\056\057\055\060\054\061" +
    "\051\062\050\063\045\064\044\065\042\066\040\067\041" +
    "\070\047\071\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\143\u0109\001\001\000\014\025\074\053\071" +
    "\067\u0106\070\047\071\046\001\001\000\100\016\012\025" +
    "\074\034\340\035\343\036\333\037\337\040\324\041\350" +
    "\042\345\043\313\044\314\045\321\046\323\047\346\050" +
    "\330\051\331\052\u0105\053\071\055\334\056\056\057\055" +
    "\060\054\061\051\062\050\063\045\064\044\065\042\066" +
    "\040\067\041\070\047\071\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\151\360\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\025\074\053\071\055" +
    "\351\056\056\057\055\060\054\061\051\062\050\063\045" +
    "\064\044\065\042\066\040\067\041\070\047\071\046\001" +
    "\001\000\002\001\001\000\004\145\352\001\001\000\004" +
    "\051\353\001\001\000\004\146\354\001\001\000\004\017" +
    "\355\001\001\000\002\001\001\000\004\051\357\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\076\026\077" +
    "\024\100\123\101\362\102\125\001\001\000\004\020\364" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\025\074\053\071\055\367\056\056\057\055" +
    "\060\054\061\051\062\050\063\045\064\044\065\042\066" +
    "\040\067\041\070\047\071\046\001\001\000\002\001\001" +
    "\000\004\152\371\001\001\000\004\051\372\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\025\074\053\071" +
    "\055\375\056\056\057\055\060\054\061\051\062\050\063" +
    "\045\064\044\065\042\066\040\067\041\070\047\071\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\074" +
    "\053\071\067\u0103\070\047\071\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\106\u0107" +
    "\107\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\104\016\012\025\074\034\340\035\343\036\333\037\337" +
    "\040\324\041\350\042\345\043\313\044\314\045\321\046" +
    "\323\047\346\050\330\051\331\052\341\053\071\055\334" +
    "\056\056\057\055\060\054\061\051\062\050\063\045\064" +
    "\044\065\042\066\040\067\041\070\047\071\046\117\u010a" +
    "\120\327\001\001\000\004\144\u010b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\013\u0111\014\u0112\025\074\053" +
    "\071\055\u0114\056\056\057\055\060\054\061\051\062\050" +
    "\063\045\064\044\065\042\066\040\067\041\070\047\071" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\014\u0117\025\074\053" +
    "\071\055\u0114\056\056\057\055\060\054\061\051\062\050" +
    "\063\045\064\044\065\042\066\040\067\041\070\047\071" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\025" +
    "\074\053\071\055\u011c\056\056\057\055\060\054\061\051" +
    "\062\050\063\045\064\044\065\042\066\040\067\041\070" +
    "\047\071\046\001\001\000\004\150\u011d\001\001\000\004" +
    "\051\u011e\001\001\000\002\001\001\000\016\075\u0120\076" +
    "\026\077\024\100\123\101\304\102\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\054\131\104\u0123\105" +
    "\126\001\001\000\002\001\001\000\004\135\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\104\016\012\025\074\034\340\035\343\036\333\037\337" +
    "\040\324\041\350\042\345\043\313\044\314\045\321\046" +
    "\323\047\346\050\330\051\331\052\341\053\071\055\334" +
    "\056\056\057\055\060\054\061\051\062\050\063\045\064" +
    "\044\065\042\066\040\067\041\070\047\071\046\117\u0129" +
    "\120\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\076\026\077\024\100\123\101\u012c\102\125\103\u012d" +
    "\001\001\000\002\001\001\000\004\020\u012f\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\136\u0131\001\001" +
    "\000\002\001\001\000\022\075\306\076\026\077\024\100" +
    "\123\101\304\102\125\121\u0133\122\305\001\001\000\002" +
    "\001\001\000\004\137\u0135\001\001\000\002\001\001\000" +
    "\104\016\012\025\074\034\340\035\343\036\333\037\337" +
    "\040\324\041\350\042\345\043\313\044\314\045\321\046" +
    "\323\047\346\050\330\051\331\052\341\053\071\055\334" +
    "\056\056\057\055\060\054\061\051\062\050\063\045\064" +
    "\044\065\042\066\040\067\041\070\047\071\046\117\u0137" +
    "\120\327\001\001\000\004\140\u0138\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\054\131\104\u013d\105\126\001\001\000\004\124" +
    "\u013e\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\076\026\077\024\100\123\101\u012c\102\125\103\u0141\001" +
    "\001\000\002\001\001\000\004\141\u0143\001\001\000\002" +
    "\001\001\000\022\075\306\076\026\077\024\100\123\101" +
    "\304\102\125\121\u0145\122\305\001\001\000\002\001\001" +
    "\000\004\142\u0147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                        ((MyParser) parser).WriteID(RESULT, _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator4_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Designator3 ::= T_THIS 
            {
              STO RESULT = null;
		
                        RESULT = ((MyParser) parser).doThis();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                        RESULT = new ExprSTO ("nullptr", new NullPointerType());
                        ((MyParser) parser).WriteNull(RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("false", new BoolType(), "0");
                        ((MyParser) parser).WriteBoolLiteral(RESULT, MyParser.FALSE_S);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("true", new BoolType(), "1");
                        ((MyParser) parser).WriteBoolLiteral(RESULT, MyParser.TRUE_S);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1, new StringType());
                        ((MyParser) parser).WriteStringLiteral(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1, new FloatType(), _1); 
                        ((MyParser) parser).WriteFloatLiteral(RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1, new IntType(), _1);
                        ((MyParser) parser).WriteIntLiteral(RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoParens(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      RESULT = ((MyParser) parser).DoFuncCall (_1, _2);
                      ((MyParser) parser).WriteFuncCall(_1, _2, RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Designator2 ::= Designator2 IncDecOp 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, Operator.newOp("P"+_2), _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoArrowDeref(_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      RESULT = ((MyParser) parser).DoDesignator2_Array (_1, _2);
                      ((MyParser) parser).WriteArrayIndex(_1, _2, RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                        ((MyParser) parser).WriteDot(_1, _3, RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Designator ::= IncDecOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_2, Operator.newOp(_1+"P"), _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Designator ::= T_LPAREN DecoratedType T_RPAREN Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoCast(_1, _2);
						((MyParser) parser).WriteCast(_2, RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Designator ::= T_SIZEOF T_LPAREN Type OptArrayList T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoSizeOf(_2, _3);
						((MyParser) parser).WriteSizeOf(RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoSizeOf(_2);
						((MyParser) parser).WriteSizeOf(RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoNotOp (_1);
						((MyParser) parser).WriteNotOp(_1, RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _1 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoBinaryExpr(_2, _1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	RESULT = ((MyParser)parser).DoAddressOf(_1);
						((MyParser) parser).WriteAmpersand(_1, RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoDeref(_1);
						((MyParser) parser).WriteDeRef(_1, RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // IncDecOp ::= T_MINUSMINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // IncDecOp ::= T_PLUSPLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // MulOp ::= T_MOD 
            {
              Operator RESULT = null;
		
                        RESULT = new ModulusOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // MulOp ::= T_SLASH 
            {
              Operator RESULT = null;
		
                        RESULT = new DivideOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // MulOp ::= T_STAR 
            {
              Operator RESULT = null;
		
                        RESULT = new MultiplyOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // AddOp ::= T_MINUS 
            {
              Operator RESULT = null;
		
                        RESULT = new MinusOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(20/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // AddOp ::= T_PLUS 
            {
              Operator RESULT = null;
		
                        RESULT = new PlusOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(20/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Relation ::= T_GTE 
            {
              Operator RESULT = null;
		
                 	RESULT = new RelationOp(Operator.GTE);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Relation ::= T_LTE 
            {
              Operator RESULT = null;
		
                 	RESULT = new RelationOp(Operator.LTE);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Relation ::= T_GT 
            {
              Operator RESULT = null;
		
                 	RESULT = new RelationOp(Operator.GT);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Relation ::= T_LT 
            {
              Operator RESULT = null;
		
                 	RESULT = new RelationOp(Operator.LT);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Equality ::= T_NEQ 
            {
              Operator RESULT = null;
		
                 	RESULT = new EqualityOp(Operator.NEQ);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Equality ::= T_EQU 
            {
              Operator RESULT = null;
		
                 	RESULT = new EqualityOp(Operator.EQ);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Expr8 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Expr8 ::= Expr8 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Expr7 ::= Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Expr7 ::= Expr7 AddOp Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);                   
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Expr6 ::= Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Expr6 ::= Expr6 Relation Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Expr5 ::= Expr5 Equality Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Expr4 ::= Expr4 T_AMPERSAND Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AmpersandOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Expr3 ::= Expr3 T_CARET Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new CaretOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Expr2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Expr2 ::= Expr2 T_BAR Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BarOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
                
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Expr1 ::= Expr1 NT$25 T_AND Expr2 
            {
              STO RESULT = null;
              // propagate RESULT from NT$25
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                	RESULT = ((MyParser) parser).DoBinaryExpr (_1, new RelationOp("&&"), _3); // may cause errors in future?
                	((MyParser) parser).WriteEqStmt_2(_3, RESULT, MyParser.AND_FLAG);
                
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$25 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

					((MyParser) parser).WriteEqStmt_1(_1, MyParser.AND_FLAG);
				
              CUP$parser$result = new java_cup.runtime.Symbol(106/*NT$25*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
                
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Expr0 ::= Expr0 NT$24 T_OR Expr1 
            {
              STO RESULT = null;
              // propagate RESULT from NT$24
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                	RESULT = ((MyParser) parser).DoBinaryExpr (_1, new RelationOp("||"), _3); 
                	((MyParser) parser).WriteEqStmt_2(_3, RESULT, MyParser.OR_FLAG);
                
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$24 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

					((MyParser) parser).WriteEqStmt_1(_1, MyParser.OR_FLAG);
				
              CUP$parser$result = new java_cup.runtime.Symbol(105/*NT$24*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // UnarySign ::= T_MINUS 
            {
              Operator RESULT = null;
		
					RESULT = new NegOp();
				
              CUP$parser$result = new java_cup.runtime.Symbol(19/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // UnarySign ::= T_PLUS 
            {
              Operator RESULT = null;
		
					RESULT = new PlusOp();
				
              CUP$parser$result = new java_cup.runtime.Symbol(19/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                        ((MyParser) parser).WriteAssignExpr(RESULT, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ExprList ::= ExprList T_COMMA Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    				RESULT = _1;
    				RESULT.addElement(_2);
    			
              CUP$parser$result = new java_cup.runtime.Symbol(76/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ExprList ::= Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = new Vector<STO> ();
					RESULT.addElement(_1);
				
              CUP$parser$result = new java_cup.runtime.Symbol(76/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OptExprList ::= 
            {
              Vector RESULT = null;
		
    					RESULT = new Vector<STO> ();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(75/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OptExprList ::= ExprList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(75/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ConstExpr ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(56/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // WritePair ::= T_ENDL 
            {
              Object RESULT = null;
		
    				((MyParser) parser).WriteENDL();
    				RESULT = "endl";
    			
              CUP$parser$result = new java_cup.runtime.Symbol(10/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // WritePair ::= Expr 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					((MyParser) parser).COut(_1);
					RESULT = _1.getName();
				
              CUP$parser$result = new java_cup.runtime.Symbol(10/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1 + " << " + _2;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(9/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // WritePairList ::= WritePair 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(9/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              String RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = "cout << " + _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(36/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						((MyParser) parser).DoCIn(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(35/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    				RESULT = ((MyParser) parser).DoReturn(_1);
    				((MyParser) parser).WriteReturn(_1);
    			
              CUP$parser$result = new java_cup.runtime.Symbol(34/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              String RESULT = null;
		
					RESULT = ((MyParser) parser).DoReturn(null);
					((MyParser) parser).WriteReturn(null);
				
              CUP$parser$result = new java_cup.runtime.Symbol(34/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NewStmt ::= T_NEW Designator OptCtorCall T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = ((MyParser) parser).DoAllocCheck("new", _1);
						((MyParser) parser).WriteNewStmt(_1, _2);
					
              CUP$parser$result = new java_cup.runtime.Symbol(38/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						RESULT = ((MyParser) parser).DoExprIntCheck(_1);
						((MyParser) parser).WriteExit(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(33/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = ((MyParser) parser).DoAllocCheck("delete", _1);
						((MyParser) parser).WriteDeleteStmt(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(37/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ContinueStmt ::= T_CONTINUE T_SEMI 
            {
              String RESULT = null;
		
						((MyParser) parser).WriteContBr(MyParser.CONTINUE);
						RESULT = "continue";
					
              CUP$parser$result = new java_cup.runtime.Symbol(32/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BreakStmt ::= T_BREAK T_SEMI 
            {
              String RESULT = null;
		
						((MyParser) parser).WriteContBr(MyParser.BREAK);
						RESULT = "break";
					
              CUP$parser$result = new java_cup.runtime.Symbol(31/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ForeachStmt ::= T_FOREACH NT$22 T_LPAREN Type OptRef T_ID T_COLON Expr T_RPAREN NT$23 CodeBlock 
            {
              String RESULT = null;
              // propagate RESULT from NT$22
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
              // propagate RESULT from NT$23
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
						((MyParser) parser).WriteForEnd();
                        ((MyParser) parser).DoBlockClose();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ForeachStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$23 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen();
                        VarSTO v = new VarSTO(_3, _1);
                        v.setRef(_2);
                        STO arr = ((MyParser) parser).DoIterationVarDecl (v, _4);
                        RESULT = ((MyParser) parser).WriteForMiddle(v, arr);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(104/*NT$23*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$22 ::= 
            {
              Object RESULT = null;

						((MyParser) parser).WriteForWhileBegin("foreach");
					
              CUP$parser$result = new java_cup.runtime.Symbol(103/*NT$22*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // WhileStmt ::= T_WHILE NT$20 Expr NT$21 CodeBlock 
            {
              String RESULT = null;
              // propagate RESULT from NT$20
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$21
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						((MyParser) parser).WriteWhileEnd();
						RESULT = "while (" + _1.getName() + "{}";
					
              CUP$parser$result = new java_cup.runtime.Symbol(30/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$21 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

						((MyParser) parser).DoExprBoolCheck(_1);
						((MyParser) parser).WriteWhileMiddle(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(102/*NT$21*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$20 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

						
						((MyParser) parser).WriteForWhileBegin("while");
					
              CUP$parser$result = new java_cup.runtime.Symbol(101/*NT$20*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OptElse ::= 
            {
              Boolean RESULT = null;
		
						((MyParser) parser).WriteEndStatementEnd();
						RESULT = false;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OptElse ::= T_ELSE CodeBlock 
            {
              Boolean RESULT = null;
		
						((MyParser) parser).WriteEndStatementEnd();
						RESULT = true;
					
              CUP$parser$result = new java_cup.runtime.Symbol(13/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IfStmt ::= T_IF Expr NT$18 CodeBlock NT$19 OptElse 
            {
              String RESULT = null;
              // propagate RESULT from NT$18
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$19
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = "if (" + _1.getName() + "{}";
						if(_2)
							RESULT += "else{}"; 
					
              CUP$parser$result = new java_cup.runtime.Symbol(28/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$19 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

						((MyParser) parser).WriteIfStatementEnd();
					
              CUP$parser$result = new java_cup.runtime.Symbol(100/*NT$19*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$18 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

						((MyParser) parser).WriteIfStatement(_1);	
						((MyParser) parser).DoExprBoolCheck(_1);					
					
              CUP$parser$result = new java_cup.runtime.Symbol(99/*NT$18*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CtorCall ::= T_COLON T_LPAREN OptExprList T_RPAREN 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(69/*CtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OptCtorCall ::= 
            {
              Vector RESULT = null;
		
    					RESULT = new Vector<VarSTO>();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(68/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OptCtorCall ::= CtorCall 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(68/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OptInit ::= 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(58/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OptInit ::= T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(58/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OptRef ::= 
            {
              Boolean RESULT = null;
		
    					RESULT = false;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(14/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OptRef ::= T_AMPERSAND 
            {
              Boolean RESULT = null;
		
						RESULT = true;
					
              CUP$parser$result = new java_cup.runtime.Symbol(14/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ParamDecl ::= Type OptRef T_ID OptArrayList 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoParamDecl(_1, _2, _3, _4);
					
              CUP$parser$result = new java_cup.runtime.Symbol(59/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    					RESULT.addElement (_2);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(80/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector<STO> ();
						RESULT.addElement (_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(80/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OptParamList ::= 
            {
              Vector RESULT = null;
		
                    	RESULT = new Vector<STO>();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					    RESULT = ((MyParser) parser).DoMultiParamCheck(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(79/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Stmt ::= DeleteStmt 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Stmt ::= NewStmt 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Stmt ::= WriteStmt 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stmt ::= ReadStmt 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stmt ::= ReturnStmt 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stmt ::= ExitStmt 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stmt ::= ContinueStmt 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Stmt ::= BreakStmt 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Stmt ::= ForeachStmt 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Stmt ::= WhileStmt 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Stmt ::= IfStmt 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Stmt ::= Expr T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = _1.getName();
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Stmt ::= CodeBlock 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Stmt ::= ConstDecl 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Stmt ::= VarDecl 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StmtList ::= StmtList Stmt 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						//((MyParser) parser).WriteSpace(_2);
    					RESULT = _1;
    					RESULT.add(_2);
    					
    				
              CUP$parser$result = new java_cup.runtime.Symbol(78/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StmtList ::= Stmt 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						//((MyParser) parser).WriteSpace(_1);
						RESULT = new Vector<STO>();
						RESULT.add(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(78/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OptStmtList ::= 
            {
              Vector RESULT = null;
		
    					RESULT = new Vector<String>();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(77/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OptStmtList ::= StmtList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(77/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CodeBlock ::= T_LBRACE NT$16 OptStmtList NT$17 T_RBRACE 
            {
              String RESULT = null;
              // propagate RESULT from NT$16
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$17
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$17 ::= 
            {
              Object RESULT = null;
 
                    	((MyParser) parser).DoBlockClose();
                    	RESULT = "CodeBlock{}"; 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(98/*NT$17*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$16 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockOpen(); 
              CUP$parser$result = new java_cup.runtime.Symbol(97/*NT$16*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Array ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArrayList ::= ArrayList Array 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    					RESULT.add(_2);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(67/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArrayList ::= Array 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector<STO>();
						RESULT.add(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(67/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OptArrayList ::= 
            {
              Vector RESULT = null;
		
    					RESULT = new Vector<STO>();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(66/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OptArrayList ::= ArrayList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(66/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Pointer ::= T_STAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Pointer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PointerList ::= PointerList Pointer 
            {
              Integer RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    					RESULT = _1 + 1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(15/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PointerList ::= Pointer 
            {
              Integer RESULT = null;
		
						RESULT = 1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(15/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OptPointerList ::= 
            {
              Integer RESULT = null;
		
    					RESULT = 0;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(16/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OptPointerList ::= PointerList 
            {
              Integer RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(16/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;
		
    					RESULT = new VoidType();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(65/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ReturnType ::= Type 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StructType ::= T_ID_U 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*StructType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		
                        RESULT = new BoolType();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		
                        RESULT = new FloatType();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		
                        RESULT = new IntType();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DecoratedBasicType ::= BasicType OptPointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = Type.mergeType(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*DecoratedBasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DecoratedType ::= StructType PointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = Type.mergeType(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DecoratedType ::= DecoratedBasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Type ::= StructType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Type ::= DecoratedType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$14 T_LPAREN OptParamList T_RPAREN NT$15 T_SEMI 
            {
              String RESULT = null;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$15 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                        ((MyParser) parser).DoFuncDecl_2(true, _1, null);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(96/*NT$15*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$14 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoFuncDecl_1(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(95/*NT$14*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$11 T_LPAREN OptParamList T_RPAREN NT$12 T_LBRACE OptStmtList NT$13 T_RBRACE 
            {
              STO RESULT = null;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(57/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$13 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).WriteFuncDeclFinish();
                        RESULT = ((MyParser) parser).DoFuncDecl_2(false, _1, _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(94/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$12 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                        ((MyParser) parser).WriteFuncDecl(_3, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(93/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$11 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(92/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FieldFuncDecl ::= FuncDef 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(8/*FieldFuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FieldFuncsList ::= FieldFuncsList FieldFuncDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    					RESULT.add(_2);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(71/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FieldFuncsList ::= FieldFuncDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector<STO>();
						RESULT.add(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(71/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OptFieldFuncsList ::= 
            {
              Vector RESULT = null;
		
    					RESULT = new Vector<STO>();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(70/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OptFieldFuncsList ::= FieldFuncsList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(70/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DtorDef ::= T_TILDE T_ID_U NT$10 T_LPAREN T_RPAREN T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoFuncDecl_2(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*DtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$10 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1("~" + _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(91/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CtorDef ::= T_ID_U NT$8 T_LPAREN OptParamList T_RPAREN NT$9 T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoFuncDecl_2(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(4/*CtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$9 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(90/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$8 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(89/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CtorDtorDecl ::= DtorDef 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(7/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CtorDtorDecl ::= CtorDef 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(7/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CtorDtorList ::= CtorDtorList CtorDtorDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _2;
    					RESULT.add(_1);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(74/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CtorDtorList ::= CtorDtorDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector<STO>();
						RESULT.add(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(74/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OptCtorDtorList ::= 
            {
              Vector RESULT = null;
		
    					RESULT = new Vector<STO>();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(73/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OptCtorDtorList ::= CtorDtorList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(73/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FieldVarDecl ::= DecoratedType T_ID OptArrayList T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = ((MyParser)parser).DoFieldVarDecl(_2, _1, _3);
					
              CUP$parser$result = new java_cup.runtime.Symbol(6/*FieldVarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FieldVarsList ::= FieldVarsList FieldVarDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _2;
						RESULT.add(_1);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(72/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FieldVarsList ::= FieldVarDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector<STO>();
						RESULT.add(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(72/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // StructdefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$5 FieldVarsList OptCtorDtorList NT$6 OptFieldFuncsList NT$7 T_RBRACE T_SEMI 
            {
              String RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*StructdefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$7 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoBlockClose();
                    	((MyParser) parser).DoStructFuncCheck(_5, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(88/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$6 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                    	((MyParser) parser).DoStructVarCheck(_4);
                    	((MyParser) parser).DoConstructorCheck(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(87/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoStructdefDecl1(_1);  
                        ((MyParser) parser).DoBlockOpen();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(86/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OptStatic ::= 
            {
              Boolean RESULT = null;
		
						RESULT = false;
					
              CUP$parser$result = new java_cup.runtime.Symbol(12/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OptStatic ::= T_STATIC 
            {
              Boolean RESULT = null;
		
						RESULT = true;
					
              CUP$parser$result = new java_cup.runtime.Symbol(12/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstDecl ::= OptStatic T_CONST BasicType T_ID T_ASSIGN ConstExpr NT$4 T_SEMI 
            {
              String RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        STO s = ((MyParser) parser).DoConstDecl (_1, _2, _3, _4);
                        RESULT = ((MyParser) parser).WriteVarDeclComment(s, _4);
                        ((MyParser) parser).WriteVarDecl(s);
                        ((MyParser) parser).WriteVarInit(s, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(85/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= OptStatic StructType T_ID OptArrayList OptCtorCall NT$3 T_SEMI 
            {
              String RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        STO s = ((MyParser) parser).DoVarDecl (_1, _2, _3, _4, _5);
                        RESULT = ((MyParser) parser).WriteVarDeclComment(s, _5);
                        ((MyParser) parser).WriteVarDecl(s);
                        ((MyParser) parser).WriteVarInit(s, _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(84/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecl ::= OptStatic DecoratedType T_ID OptArrayList OptInit NT$2 T_SEMI 
            {
              String RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        STO s = ((MyParser) parser).DoVarDecl (_1, _2,  _3, _4, _5);
                        RESULT = ((MyParser) parser).WriteVarDeclComment(s, _5);
                        ((MyParser) parser).WriteVarDecl(s);
                        ((MyParser) parser).WriteVarInit(s, _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(83/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ExternDecl ::= T_EXTERN DecoratedBasicType T_ID OptArrayList NT$1 T_SEMI 
            {
              String RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoExternDecl (_2, _3, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(82/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1.getName();
				
              CUP$parser$result = new java_cup.runtime.Symbol(22/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(22/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= StructdefDecl 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(22/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(22/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(22/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(22/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    			
              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				
              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoProgramEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).DoProgramStart(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(81/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


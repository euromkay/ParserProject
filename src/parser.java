
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Tue Jan 06 15:56:49 PST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.util.ArrayList;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Tue Jan 06 15:56:49 PST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\266\000\002\114\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\031\006\000\002\034\006\000\002\022" +
    "\007\000\002\076\003\000\002\076\002\000\002\016\006" +
    "\000\002\115\002\000\002\016\011\000\002\100\003\000" +
    "\002\100\004\000\002\104\005\000\002\104\003\000\002" +
    "\116\002\000\002\117\002\000\002\065\017\000\002\120" +
    "\002\000\002\121\002\000\002\030\015\000\002\073\005" +
    "\000\002\073\011\000\002\074\003\000\002\074\011\000" +
    "\002\072\003\000\002\072\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\013\003\000\002\013" +
    "\002\000\002\014\003\000\002\014\004\000\002\011\003" +
    "\000\002\012\005\000\002\012\002\000\002\075\004\000" +
    "\002\075\003\000\002\122\002\000\002\123\002\000\002" +
    "\037\007\000\002\102\003\000\002\102\002\000\002\103" +
    "\003\000\002\103\004\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\004\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\105\003\000\002\105\002\000" +
    "\002\106\003\000\002\106\005\000\002\064\005\000\002" +
    "\077\003\000\002\077\002\000\002\113\005\000\002\113" +
    "\007\000\002\101\003\000\002\101\005\000\002\111\006" +
    "\000\002\111\010\000\002\112\007\000\002\112\011\000" +
    "\002\067\004\000\002\067\002\000\002\124\002\000\002" +
    "\125\002\000\002\033\010\000\002\010\004\000\002\010" +
    "\002\000\002\126\002\000\002\127\002\000\002\023\007" +
    "\000\002\063\005\000\002\130\002\000\002\131\002\000" +
    "\002\021\013\000\002\024\004\000\002\025\004\000\002" +
    "\017\005\000\002\026\007\000\002\020\005\000\002\035" +
    "\004\000\002\035\005\000\002\027\006\000\002\032\006" +
    "\000\002\006\003\000\002\006\005\000\002\007\003\000" +
    "\002\007\003\000\002\070\003\000\002\110\003\000\002" +
    "\110\002\000\002\107\003\000\002\107\005\000\002\045" +
    "\003\000\002\045\003\000\002\046\005\000\002\046\003" +
    "\000\002\132\002\000\002\047\006\000\002\047\003\000" +
    "\002\133\002\000\002\050\006\000\002\050\003\000\002" +
    "\051\005\000\002\051\003\000\002\052\005\000\002\052" +
    "\003\000\002\053\005\000\002\053\003\000\002\054\005" +
    "\000\002\054\003\000\002\055\005\000\002\055\003\000" +
    "\002\056\005\000\002\056\003\000\002\057\005\000\002" +
    "\057\003\000\002\044\003\000\002\044\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\041\003\000\002\041\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\015\003\000\002" +
    "\015\003\000\002\060\004\000\002\060\004\000\002\060" +
    "\004\000\002\060\004\000\002\060\006\000\002\060\006" +
    "\000\002\060\006\000\002\060\004\000\002\060\003\000" +
    "\002\061\005\000\002\061\006\000\002\061\005\000\002" +
    "\061\004\000\002\061\006\000\002\061\003\000\002\062" +
    "\005\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\004\000\002\062\003\000\002" +
    "\066\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\032\002\001\006\001\014\001\025\001\027" +
    "\001\030\001\033\001\062\001\063\001\066\001\103\001" +
    "\107\001\001\002\000\004\002\u0143\001\002\000\032\002" +
    "\ufffd\006\ufff0\014\ufff0\025\ufff0\027\ufff0\030\010\033\ufff0" +
    "\062\014\063\011\066\024\103\ufff0\107\007\001\002\000" +
    "\032\002\ufff6\006\ufff6\014\ufff6\025\ufff6\027\ufff6\030\ufff6" +
    "\033\ufff6\062\ufff6\063\ufff6\066\ufff6\103\ufff6\107\ufff6\001" +
    "\002\000\016\006\033\025\034\027\242\030\u0137\033\035" +
    "\103\031\001\002\000\004\011\330\001\002\000\004\103" +
    "\305\001\002\000\016\006\033\014\243\025\034\027\242" +
    "\033\035\103\031\001\002\000\032\002\ufff9\006\ufff9\014" +
    "\ufff9\025\ufff9\027\ufff9\030\ufff9\033\ufff9\062\ufff9\063\ufff9" +
    "\066\ufff9\103\ufff9\107\ufff9\001\002\000\016\006\ufff1\014" +
    "\ufff1\025\ufff1\027\ufff1\033\ufff1\103\ufff1\001\002\000\032" +
    "\002\ufffc\006\ufffc\014\ufffc\025\ufffc\027\ufffc\030\ufffc\033" +
    "\ufffc\062\ufffc\063\ufffc\066\ufffc\103\ufffc\107\ufffc\001\002" +
    "\000\032\002\ufff7\006\ufff7\014\ufff7\025\ufff7\027\ufff7\030" +
    "\ufff7\033\ufff7\062\ufff7\063\ufff7\066\ufff7\103\ufff7\107\ufff7" +
    "\001\002\000\032\002\ufff5\006\ufff5\014\ufff5\025\ufff5\027" +
    "\ufff5\030\ufff5\033\ufff5\062\ufff5\063\ufff5\066\ufff5\103\ufff5" +
    "\107\ufff5\001\002\000\032\002\ufffe\006\ufff0\014\ufff0\025" +
    "\ufff0\027\ufff0\030\010\033\ufff0\062\014\063\011\066\024" +
    "\103\ufff0\107\007\001\002\000\032\002\ufffa\006\ufffa\014" +
    "\ufffa\025\ufffa\027\ufffa\030\ufffa\033\ufffa\062\ufffa\063\ufffa" +
    "\066\ufffa\103\ufffa\107\ufffa\001\002\000\004\002\000\001" +
    "\002\000\032\002\ufff8\006\ufff8\014\ufff8\025\ufff8\027\ufff8" +
    "\030\ufff8\033\ufff8\062\ufff8\063\ufff8\066\ufff8\103\ufff8\107" +
    "\ufff8\001\002\000\014\006\033\025\034\027\032\033\035" +
    "\103\031\001\002\000\020\036\uffde\037\uffde\055\uffde\061" +
    "\uffde\071\uffde\103\uffde\106\uffde\001\002\000\004\103\232" +
    "\001\002\000\020\036\uffdd\037\uffdd\055\uffdd\061\uffdd\071" +
    "\uffdd\103\uffdd\106\uffdd\001\002\000\016\036\uffd8\055\uffd8" +
    "\061\060\071\uffd8\103\uffd8\106\uffd8\001\002\000\020\036" +
    "\uff4c\037\uff4c\055\uff4c\061\uff4c\071\uff4c\103\uff4c\106\uff4c" +
    "\001\002\000\004\011\036\001\002\000\020\036\uffda\037" +
    "\uffda\055\uffda\061\uffda\071\uffda\103\uffda\106\uffda\001\002" +
    "\000\020\036\uffdb\037\uffdb\055\uffdb\061\uffdb\071\uffdb\103" +
    "\uffdb\106\uffdb\001\002\000\020\036\uffdc\037\uffdc\055\uffdc" +
    "\061\uffdc\071\uffdc\103\uffdc\106\uffdc\001\002\000\014\006" +
    "\033\025\034\033\035\067\041\103\031\001\002\000\012" +
    "\037\uffd8\061\060\071\uffd8\106\uffd8\001\002\000\006\037" +
    "\uffb3\071\042\001\002\000\010\037\uffd1\071\uffd1\106\uffd1" +
    "\001\002\000\006\037\uffb4\106\uffb4\001\002\000\004\037" +
    "\044\001\002\000\016\006\033\025\034\027\032\033\035" +
    "\055\uffb8\103\031\001\002\000\006\071\042\106\uffb3\001" +
    "\002\000\006\013\052\055\uffb9\001\002\000\006\013\uffb7" +
    "\055\uffb7\001\002\000\004\055\051\001\002\000\012\055" +
    "\uffe1\071\uffe1\103\uffe1\106\uffe1\001\002\000\014\006\033" +
    "\025\034\027\032\033\035\103\031\001\002\000\006\013" +
    "\uffb6\055\uffb6\001\002\000\004\106\055\001\002\000\006" +
    "\013\uffb5\055\uffb5\001\002\000\020\036\uffd7\037\uffd7\055" +
    "\uffd7\061\uffd7\071\uffd7\103\uffd7\106\uffd7\001\002\000\020" +
    "\036\uffd9\037\uffd9\055\uffd9\061\060\071\uffd9\103\uffd9\106" +
    "\uffd9\001\002\000\020\036\uffd5\037\uffd5\055\uffd5\061\uffd5" +
    "\071\uffd5\103\uffd5\106\uffd5\001\002\000\010\037\uffd2\071" +
    "\uffd2\106\uffd2\001\002\000\020\036\uffd6\037\uffd6\055\uffd6" +
    "\061\uffd6\071\uffd6\103\uffd6\106\uffd6\001\002\000\014\036" +
    "\064\055\uffd3\071\uffd3\103\uffd3\106\uffd3\001\002\000\046" +
    "\012\125\024\111\037\120\042\112\043\121\046\126\050" +
    "\123\051\110\057\114\061\127\064\105\065\101\071\116" +
    "\074\106\100\124\101\107\102\071\106\115\001\002\000" +
    "\012\055\uffe2\071\uffe2\103\uffe2\106\uffe2\001\002\000\060" +
    "\005\230\013\uff73\022\uff73\031\uff73\032\uff73\035\uff73\040" +
    "\uff73\041\uff73\042\uff73\044\uff73\045\uff73\047\uff73\050\uff73" +
    "\053\uff73\055\uff73\056\uff73\060\uff73\061\uff73\070\uff73\071" +
    "\uff73\072\uff73\073\uff73\075\uff73\001\002\000\056\013\uff75" +
    "\022\uff75\031\uff75\032\uff75\035\uff75\040\uff75\041\uff75\042" +
    "\uff75\044\203\045\uff75\047\uff75\050\uff75\053\uff75\055\uff75" +
    "\056\uff75\060\205\061\204\070\uff75\071\uff75\072\uff75\073" +
    "\uff75\075\uff75\001\002\000\050\013\uff77\022\uff77\031\uff77" +
    "\032\uff77\035\uff77\040\uff77\041\uff77\042\200\045\uff77\047" +
    "\uff77\050\177\053\uff77\055\uff77\056\uff77\070\uff77\071\uff77" +
    "\072\uff77\073\uff77\075\uff77\001\002\000\074\004\uff53\005" +
    "\uff53\013\uff53\017\uff53\022\uff53\031\uff53\032\uff53\035\uff53" +
    "\036\uff53\037\uff53\040\uff53\041\uff53\042\uff53\043\uff53\044" +
    "\uff53\045\uff53\047\uff53\050\uff53\051\uff53\053\uff53\055\uff53" +
    "\056\uff53\060\uff53\061\uff53\070\uff53\071\uff53\072\uff53\073" +
    "\uff53\075\uff53\001\002\000\044\013\uff79\022\uff79\031\175" +
    "\032\171\035\uff79\040\173\041\172\045\uff79\047\uff79\053" +
    "\uff79\055\uff79\056\uff79\070\uff79\071\uff79\072\uff79\073\uff79" +
    "\075\uff79\001\002\000\034\013\uff7b\022\167\035\uff7b\045" +
    "\166\047\uff7b\053\uff7b\055\uff7b\056\uff7b\070\uff7b\071\uff7b" +
    "\072\uff7b\073\uff7b\075\uff7b\001\002\000\074\004\uff57\005" +
    "\uff57\013\uff57\017\uff57\022\uff57\031\uff57\032\uff57\035\uff57" +
    "\036\uff57\037\uff57\040\uff57\041\uff57\042\uff57\043\uff57\044" +
    "\uff57\045\uff57\047\uff57\050\uff57\051\uff57\053\uff57\055\uff57" +
    "\056\uff57\060\uff57\061\uff57\070\uff57\071\uff57\072\uff57\073" +
    "\uff57\075\uff57\001\002\000\074\004\215\005\uff5d\013\uff5d" +
    "\017\214\022\uff5d\031\uff5d\032\uff5d\035\uff5d\036\211\037" +
    "\212\040\uff5d\041\uff5d\042\uff5d\043\121\044\uff5d\045\uff5d" +
    "\047\uff5d\050\uff5d\051\110\053\uff5d\055\uff5d\056\uff5d\060" +
    "\uff5d\061\uff5d\070\uff5d\071\uff5d\072\uff5d\073\uff5d\075\uff5d" +
    "\001\002\000\030\013\uff7d\035\uff7d\047\uff7d\053\uff7d\055" +
    "\uff7d\056\uff7d\070\uff7d\071\163\072\uff7d\073\uff7d\075\uff7d" +
    "\001\002\000\004\053\210\001\002\000\026\013\uff7f\035" +
    "\uff7f\047\uff7f\053\uff7f\055\uff7f\056\uff7f\070\uff7f\072\uff7f" +
    "\073\161\075\uff7f\001\002\000\074\004\uff52\005\uff52\013" +
    "\uff52\017\uff52\022\uff52\031\uff52\032\uff52\035\uff52\036\uff52" +
    "\037\uff52\040\uff52\041\uff52\042\uff52\043\uff52\044\uff52\045" +
    "\uff52\047\uff52\050\uff52\051\uff52\053\uff52\055\uff52\056\uff52" +
    "\060\uff52\061\uff52\070\uff52\071\uff52\072\uff52\073\uff52\075" +
    "\uff52\001\002\000\024\013\uff81\035\uff81\047\uff81\053\uff81" +
    "\055\uff81\056\uff81\070\uff81\072\157\075\uff81\001\002\000" +
    "\022\013\uff84\035\uff84\047\uff84\053\uff84\055\uff84\056\uff84" +
    "\070\uff83\075\uff84\001\002\000\020\013\uff87\035\uff87\047" +
    "\uff87\053\uff87\055\uff87\056\uff87\075\uff86\001\002\000\074" +
    "\004\uff4f\005\uff4f\013\uff4f\017\uff4f\022\uff4f\031\uff4f\032" +
    "\uff4f\035\uff4f\036\uff4f\037\uff4f\040\uff4f\041\uff4f\042\uff4f" +
    "\043\uff4f\044\uff4f\045\uff4f\047\uff4f\050\uff4f\051\uff4f\053" +
    "\uff4f\055\uff4f\056\uff4f\060\uff4f\061\uff4f\070\uff4f\071\uff4f" +
    "\072\uff4f\073\uff4f\075\uff4f\001\002\000\046\012\125\024" +
    "\111\037\120\042\112\043\121\046\126\050\123\051\110" +
    "\057\114\061\127\064\105\065\101\071\116\074\106\100" +
    "\124\101\107\102\071\106\115\001\002\000\074\004\uff55" +
    "\005\uff55\013\uff55\017\uff55\022\uff55\031\uff55\032\uff55\035" +
    "\uff55\036\uff55\037\uff55\040\uff55\041\uff55\042\uff55\043\uff55" +
    "\044\uff55\045\uff55\047\uff55\050\uff55\051\uff55\053\uff55\055" +
    "\uff55\056\uff55\060\uff55\061\uff55\070\uff55\071\uff55\072\uff55" +
    "\073\uff55\075\uff55\001\002\000\122\004\uff67\005\uff67\012" +
    "\uff67\013\uff67\017\uff67\022\uff67\024\uff67\031\uff67\032\uff67" +
    "\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67\042\uff67\043" +
    "\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67" +
    "\053\uff67\055\uff67\056\uff67\057\uff67\060\uff67\061\uff67\064" +
    "\uff67\065\uff67\070\uff67\071\uff67\072\uff67\073\uff67\074\uff67" +
    "\075\uff67\100\uff67\101\uff67\102\uff67\106\uff67\001\002\000" +
    "\074\004\uff51\005\uff51\013\uff51\017\uff51\022\uff51\031\uff51" +
    "\032\uff51\035\uff51\036\uff51\037\uff51\040\uff51\041\uff51\042" +
    "\uff51\043\uff51\044\uff51\045\uff51\047\uff51\050\uff51\051\uff51" +
    "\053\uff51\055\uff51\056\uff51\060\uff51\061\uff51\070\uff51\071" +
    "\uff51\072\uff51\073\uff51\075\uff51\001\002\000\046\012\uff89" +
    "\024\uff89\037\uff89\042\uff89\043\uff89\046\uff89\050\uff89\051" +
    "\uff89\057\uff89\061\uff89\064\uff89\065\uff89\071\uff89\074\uff89" +
    "\100\uff89\101\uff89\102\uff89\106\uff89\001\002\000\010\013" +
    "\uff8f\053\uff8f\056\uff8f\001\002\000\004\037\142\001\002" +
    "\000\074\004\uff4d\005\uff4d\013\uff4d\017\uff4d\022\uff4d\031" +
    "\uff4d\032\uff4d\035\uff4d\036\uff4d\037\uff4d\040\uff4d\041\uff4d" +
    "\042\uff4d\043\uff4d\044\uff4d\045\uff4d\047\uff4d\050\uff4d\051" +
    "\uff4d\053\uff4d\055\uff4d\056\uff4d\060\uff4d\061\uff4d\070\uff4d" +
    "\071\uff4d\072\uff4d\073\uff4d\075\uff4d\001\002\000\046\012" +
    "\125\024\111\037\120\042\112\043\121\046\126\050\123" +
    "\051\110\057\114\061\127\064\105\065\101\071\116\074" +
    "\106\100\124\101\107\102\071\106\115\001\002\000\046" +
    "\012\125\024\111\037\120\042\112\043\121\046\126\050" +
    "\123\051\110\057\114\061\127\064\105\065\101\071\116" +
    "\074\106\100\124\101\107\102\071\106\115\001\002\000" +
    "\060\006\033\012\125\024\111\025\034\027\032\033\035" +
    "\037\120\042\112\043\121\046\126\050\123\051\110\057" +
    "\114\061\127\064\105\065\101\071\116\074\106\100\124" +
    "\101\107\102\071\103\031\106\115\001\002\000\122\004" +
    "\uff66\005\uff66\012\uff66\013\uff66\017\uff66\022\uff66\024\uff66" +
    "\031\uff66\032\uff66\035\uff66\036\uff66\037\uff66\040\uff66\041" +
    "\uff66\042\uff66\043\uff66\044\uff66\045\uff66\046\uff66\047\uff66" +
    "\050\uff66\051\uff66\053\uff66\055\uff66\056\uff66\057\uff66\060" +
    "\uff66\061\uff66\064\uff66\065\uff66\070\uff66\071\uff66\072\uff66" +
    "\073\uff66\074\uff66\075\uff66\100\uff66\101\uff66\102\uff66\106" +
    "\uff66\001\002\000\046\012\125\024\111\037\120\042\112" +
    "\043\121\046\126\050\123\051\110\057\114\061\127\064" +
    "\105\065\101\071\116\074\106\100\124\101\107\102\071" +
    "\106\115\001\002\000\046\012\uff8a\024\uff8a\037\uff8a\042" +
    "\uff8a\043\uff8a\046\uff8a\050\uff8a\051\uff8a\057\uff8a\061\uff8a" +
    "\064\uff8a\065\uff8a\071\uff8a\074\uff8a\100\uff8a\101\uff8a\102" +
    "\uff8a\106\uff8a\001\002\000\074\004\uff54\005\uff54\013\uff54" +
    "\017\uff54\022\uff54\031\uff54\032\uff54\035\uff54\036\uff54\037" +
    "\uff54\040\uff54\041\uff54\042\uff54\043\uff54\044\uff54\045\uff54" +
    "\047\uff54\050\uff54\051\uff54\053\uff54\055\uff54\056\uff54\060" +
    "\uff54\061\uff54\070\uff54\071\uff54\072\uff54\073\uff54\075\uff54" +
    "\001\002\000\004\106\131\001\002\000\074\004\uff50\005" +
    "\uff50\013\uff50\017\uff50\022\uff50\031\uff50\032\uff50\035\uff50" +
    "\036\uff50\037\uff50\040\uff50\041\uff50\042\uff50\043\uff50\044" +
    "\uff50\045\uff50\047\uff50\050\uff50\051\uff50\053\uff50\055\uff50" +
    "\056\uff50\060\uff50\061\uff50\070\uff50\071\uff50\072\uff50\073" +
    "\uff50\075\uff50\001\002\000\046\012\125\024\111\037\120" +
    "\042\112\043\121\046\126\050\123\051\110\057\114\061" +
    "\127\064\105\065\101\071\116\074\106\100\124\101\107" +
    "\102\071\106\115\001\002\000\060\005\uff65\013\uff65\022" +
    "\uff65\031\uff65\032\uff65\035\uff65\040\uff65\041\uff65\042\uff65" +
    "\044\uff65\045\uff65\047\uff65\050\uff65\053\uff65\055\uff65\056" +
    "\uff65\060\uff65\061\uff65\070\uff65\071\uff65\072\uff65\073\uff65" +
    "\075\uff65\001\002\000\074\004\uff4e\005\uff4e\013\uff4e\017" +
    "\uff4e\022\uff4e\031\uff4e\032\uff4e\035\uff4e\036\uff4e\037\uff4e" +
    "\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e\045\uff4e\047" +
    "\uff4e\050\uff4e\051\uff4e\053\uff4e\055\uff4e\056\uff4e\060\uff4e" +
    "\061\uff4e\070\uff4e\071\uff4e\072\uff4e\073\uff4e\075\uff4e\001" +
    "\002\000\060\005\uff63\013\uff63\022\uff63\031\uff63\032\uff63" +
    "\035\uff63\040\uff63\041\uff63\042\uff63\044\uff63\045\uff63\047" +
    "\uff63\050\uff63\053\uff63\055\uff63\056\uff63\060\uff63\061\uff63" +
    "\070\uff63\071\uff63\072\uff63\073\uff63\075\uff63\001\002\000" +
    "\004\055\137\001\002\000\004\055\135\001\002\000\046" +
    "\012\125\024\111\037\120\042\112\043\121\046\126\050" +
    "\123\051\110\057\114\061\127\064\105\065\101\071\116" +
    "\074\106\100\124\101\107\102\071\106\115\001\002\000" +
    "\060\005\uff5f\013\uff5f\022\uff5f\031\uff5f\032\uff5f\035\uff5f" +
    "\040\uff5f\041\uff5f\042\uff5f\044\uff5f\045\uff5f\047\uff5f\050" +
    "\uff5f\053\uff5f\055\uff5f\056\uff5f\060\uff5f\061\uff5f\070\uff5f" +
    "\071\uff5f\072\uff5f\073\uff5f\075\uff5f\001\002\000\074\004" +
    "\uff56\005\uff56\013\uff56\017\uff56\022\uff56\031\uff56\032\uff56" +
    "\035\uff56\036\uff56\037\uff56\040\uff56\041\uff56\042\uff56\043" +
    "\uff56\044\uff56\045\uff56\047\uff56\050\uff56\051\uff56\053\uff56" +
    "\055\uff56\056\uff56\060\uff56\061\uff56\070\uff56\071\uff56\072" +
    "\uff56\073\uff56\075\uff56\001\002\000\060\005\uff5e\013\uff5e" +
    "\022\uff5e\031\uff5e\032\uff5e\035\uff5e\040\uff5e\041\uff5e\042" +
    "\uff5e\044\uff5e\045\uff5e\047\uff5e\050\uff5e\053\uff5e\055\uff5e" +
    "\056\uff5e\060\uff5e\061\uff5e\070\uff5e\071\uff5e\072\uff5e\073" +
    "\uff5e\075\uff5e\001\002\000\060\005\uff64\013\uff64\022\uff64" +
    "\031\uff64\032\uff64\035\uff64\040\uff64\041\uff64\042\uff64\044" +
    "\uff64\045\uff64\047\uff64\050\uff64\053\uff64\055\uff64\056\uff64" +
    "\060\uff64\061\uff64\070\uff64\071\uff64\072\uff64\073\uff64\075" +
    "\uff64\001\002\000\060\006\033\012\125\024\111\025\034" +
    "\027\032\033\035\037\120\042\112\043\121\046\126\050" +
    "\123\051\110\057\114\061\127\064\105\065\101\071\116" +
    "\074\106\100\124\101\107\102\071\103\031\106\115\001" +
    "\002\000\004\055\146\001\002\000\004\055\145\001\002" +
    "\000\060\005\uff60\013\uff60\022\uff60\031\uff60\032\uff60\035" +
    "\uff60\040\uff60\041\uff60\042\uff60\044\uff60\045\uff60\047\uff60" +
    "\050\uff60\053\uff60\055\uff60\056\uff60\060\uff60\061\uff60\070" +
    "\uff60\071\uff60\072\uff60\073\uff60\075\uff60\001\002\000\060" +
    "\005\uff61\013\uff61\022\uff61\031\uff61\032\uff61\035\uff61\040" +
    "\uff61\041\uff61\042\uff61\044\uff61\045\uff61\047\uff61\050\uff61" +
    "\053\uff61\055\uff61\056\uff61\060\uff61\061\uff61\070\uff61\071" +
    "\uff61\072\uff61\073\uff61\075\uff61\001\002\000\060\005\uff62" +
    "\013\uff62\022\uff62\031\uff62\032\uff62\035\uff62\040\uff62\041" +
    "\uff62\042\uff62\044\uff62\045\uff62\047\uff62\050\uff62\053\uff62" +
    "\055\uff62\056\uff62\060\uff62\061\uff62\070\uff62\071\uff62\072" +
    "\uff62\073\uff62\075\uff62\001\002\000\004\075\151\001\002" +
    "\000\046\012\125\024\111\037\120\042\112\043\121\046" +
    "\126\050\123\051\110\057\114\061\127\064\105\065\101" +
    "\071\116\074\106\100\124\101\107\102\071\106\115\001" +
    "\002\000\056\013\uff73\022\uff73\031\uff73\032\uff73\035\uff73" +
    "\040\uff73\041\uff73\042\uff73\044\uff73\045\uff73\047\uff73\050" +
    "\uff73\053\uff73\055\uff73\056\uff73\060\uff73\061\uff73\070\uff73" +
    "\071\uff73\072\uff73\073\uff73\075\uff73\001\002\000\022\013" +
    "\uff85\035\uff85\047\uff85\053\uff85\055\uff85\056\uff85\070\uff83" +
    "\075\uff85\001\002\000\004\070\155\001\002\000\046\012" +
    "\125\024\111\037\120\042\112\043\121\046\126\050\123" +
    "\051\110\057\114\061\127\064\105\065\101\071\116\074" +
    "\106\100\124\101\107\102\071\106\115\001\002\000\024" +
    "\013\uff82\035\uff82\047\uff82\053\uff82\055\uff82\056\uff82\070" +
    "\uff82\072\157\075\uff82\001\002\000\046\012\125\024\111" +
    "\037\120\042\112\043\121\046\126\050\123\051\110\057" +
    "\114\061\127\064\105\065\101\071\116\074\106\100\124" +
    "\101\107\102\071\106\115\001\002\000\026\013\uff80\035" +
    "\uff80\047\uff80\053\uff80\055\uff80\056\uff80\070\uff80\072\uff80" +
    "\073\161\075\uff80\001\002\000\046\012\125\024\111\037" +
    "\120\042\112\043\121\046\126\050\123\051\110\057\114" +
    "\061\127\064\105\065\101\071\116\074\106\100\124\101" +
    "\107\102\071\106\115\001\002\000\030\013\uff7e\035\uff7e" +
    "\047\uff7e\053\uff7e\055\uff7e\056\uff7e\070\uff7e\071\163\072" +
    "\uff7e\073\uff7e\075\uff7e\001\002\000\046\012\125\024\111" +
    "\037\120\042\112\043\121\046\126\050\123\051\110\057" +
    "\114\061\127\064\105\065\101\071\116\074\106\100\124" +
    "\101\107\102\071\106\115\001\002\000\034\013\uff7c\022" +
    "\167\035\uff7c\045\166\047\uff7c\053\uff7c\055\uff7c\056\uff7c" +
    "\070\uff7c\071\uff7c\072\uff7c\073\uff7c\075\uff7c\001\002\000" +
    "\046\012\125\024\111\037\120\042\112\043\121\046\126" +
    "\050\123\051\110\057\114\061\127\064\105\065\101\071" +
    "\116\074\106\100\124\101\107\102\071\106\115\001\002" +
    "\000\046\012\uff71\024\uff71\037\uff71\042\uff71\043\uff71\046" +
    "\uff71\050\uff71\051\uff71\057\uff71\061\uff71\064\uff71\065\uff71" +
    "\071\uff71\074\uff71\100\uff71\101\uff71\102\uff71\106\uff71\001" +
    "\002\000\046\012\uff72\024\uff72\037\uff72\042\uff72\043\uff72" +
    "\046\uff72\050\uff72\051\uff72\057\uff72\061\uff72\064\uff72\065" +
    "\uff72\071\uff72\074\uff72\100\uff72\101\uff72\102\uff72\106\uff72" +
    "\001\002\000\044\013\uff7a\022\uff7a\031\175\032\171\035" +
    "\uff7a\040\173\041\172\045\uff7a\047\uff7a\053\uff7a\055\uff7a" +
    "\056\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\075\uff7a\001" +
    "\002\000\046\012\uff6d\024\uff6d\037\uff6d\042\uff6d\043\uff6d" +
    "\046\uff6d\050\uff6d\051\uff6d\057\uff6d\061\uff6d\064\uff6d\065" +
    "\uff6d\071\uff6d\074\uff6d\100\uff6d\101\uff6d\102\uff6d\106\uff6d" +
    "\001\002\000\046\012\uff6e\024\uff6e\037\uff6e\042\uff6e\043" +
    "\uff6e\046\uff6e\050\uff6e\051\uff6e\057\uff6e\061\uff6e\064\uff6e" +
    "\065\uff6e\071\uff6e\074\uff6e\100\uff6e\101\uff6e\102\uff6e\106" +
    "\uff6e\001\002\000\046\012\uff70\024\uff70\037\uff70\042\uff70" +
    "\043\uff70\046\uff70\050\uff70\051\uff70\057\uff70\061\uff70\064" +
    "\uff70\065\uff70\071\uff70\074\uff70\100\uff70\101\uff70\102\uff70" +
    "\106\uff70\001\002\000\046\012\125\024\111\037\120\042" +
    "\112\043\121\046\126\050\123\051\110\057\114\061\127" +
    "\064\105\065\101\071\116\074\106\100\124\101\107\102" +
    "\071\106\115\001\002\000\046\012\uff6f\024\uff6f\037\uff6f" +
    "\042\uff6f\043\uff6f\046\uff6f\050\uff6f\051\uff6f\057\uff6f\061" +
    "\uff6f\064\uff6f\065\uff6f\071\uff6f\074\uff6f\100\uff6f\101\uff6f" +
    "\102\uff6f\106\uff6f\001\002\000\050\013\uff78\022\uff78\031" +
    "\uff78\032\uff78\035\uff78\040\uff78\041\uff78\042\200\045\uff78" +
    "\047\uff78\050\177\053\uff78\055\uff78\056\uff78\070\uff78\071" +
    "\uff78\072\uff78\073\uff78\075\uff78\001\002\000\046\012\uff6c" +
    "\024\uff6c\037\uff6c\042\uff6c\043\uff6c\046\uff6c\050\uff6c\051" +
    "\uff6c\057\uff6c\061\uff6c\064\uff6c\065\uff6c\071\uff6c\074\uff6c" +
    "\100\uff6c\101\uff6c\102\uff6c\106\uff6c\001\002\000\046\012" +
    "\uff6b\024\uff6b\037\uff6b\042\uff6b\043\uff6b\046\uff6b\050\uff6b" +
    "\051\uff6b\057\uff6b\061\uff6b\064\uff6b\065\uff6b\071\uff6b\074" +
    "\uff6b\100\uff6b\101\uff6b\102\uff6b\106\uff6b\001\002\000\046" +
    "\012\125\024\111\037\120\042\112\043\121\046\126\050" +
    "\123\051\110\057\114\061\127\064\105\065\101\071\116" +
    "\074\106\100\124\101\107\102\071\106\115\001\002\000" +
    "\056\013\uff76\022\uff76\031\uff76\032\uff76\035\uff76\040\uff76" +
    "\041\uff76\042\uff76\044\203\045\uff76\047\uff76\050\uff76\053" +
    "\uff76\055\uff76\056\uff76\060\205\061\204\070\uff76\071\uff76" +
    "\072\uff76\073\uff76\075\uff76\001\002\000\046\012\uff68\024" +
    "\uff68\037\uff68\042\uff68\043\uff68\046\uff68\050\uff68\051\uff68" +
    "\057\uff68\061\uff68\064\uff68\065\uff68\071\uff68\074\uff68\100" +
    "\uff68\101\uff68\102\uff68\106\uff68\001\002\000\046\012\uff6a" +
    "\024\uff6a\037\uff6a\042\uff6a\043\uff6a\046\uff6a\050\uff6a\051" +
    "\uff6a\057\uff6a\061\uff6a\064\uff6a\065\uff6a\071\uff6a\074\uff6a" +
    "\100\uff6a\101\uff6a\102\uff6a\106\uff6a\001\002\000\046\012" +
    "\uff69\024\uff69\037\uff69\042\uff69\043\uff69\046\uff69\050\uff69" +
    "\051\uff69\057\uff69\061\uff69\064\uff69\065\uff69\071\uff69\074" +
    "\uff69\100\uff69\101\uff69\102\uff69\106\uff69\001\002\000\046" +
    "\012\125\024\111\037\120\042\112\043\121\046\126\050" +
    "\123\051\110\057\114\061\127\064\105\065\101\071\116" +
    "\074\106\100\124\101\107\102\071\106\115\001\002\000" +
    "\056\013\uff74\022\uff74\031\uff74\032\uff74\035\uff74\040\uff74" +
    "\041\uff74\042\uff74\044\uff74\045\uff74\047\uff74\050\uff74\053" +
    "\uff74\055\uff74\056\uff74\060\uff74\061\uff74\070\uff74\071\uff74" +
    "\072\uff74\073\uff74\075\uff74\001\002\000\012\055\uffd4\071" +
    "\uffd4\103\uffd4\106\uffd4\001\002\000\046\012\125\024\111" +
    "\037\120\042\112\043\121\046\126\050\123\051\110\057" +
    "\114\061\127\064\105\065\101\071\116\074\106\100\124" +
    "\101\107\102\071\106\115\001\002\000\050\012\125\024" +
    "\111\037\120\042\112\043\121\046\126\050\123\051\110" +
    "\055\uff8d\057\114\061\127\064\105\065\101\071\116\074" +
    "\106\100\124\101\107\102\071\106\115\001\002\000\074" +
    "\004\uff59\005\uff59\013\uff59\017\uff59\022\uff59\031\uff59\032" +
    "\uff59\035\uff59\036\uff59\037\uff59\040\uff59\041\uff59\042\uff59" +
    "\043\uff59\044\uff59\045\uff59\047\uff59\050\uff59\051\uff59\053" +
    "\uff59\055\uff59\056\uff59\060\uff59\061\uff59\070\uff59\071\uff59" +
    "\072\uff59\073\uff59\075\uff59\001\002\000\004\106\217\001" +
    "\002\000\004\106\216\001\002\000\074\004\uff5a\005\uff5a" +
    "\013\uff5a\017\uff5a\022\uff5a\031\uff5a\032\uff5a\035\uff5a\036" +
    "\uff5a\037\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a" +
    "\045\uff5a\047\uff5a\050\uff5a\051\uff5a\053\uff5a\055\uff5a\056" +
    "\uff5a\060\uff5a\061\uff5a\070\uff5a\071\uff5a\072\uff5a\073\uff5a" +
    "\075\uff5a\001\002\000\074\004\uff5c\005\uff5c\013\uff5c\017" +
    "\uff5c\022\uff5c\031\uff5c\032\uff5c\035\uff5c\036\uff5c\037\uff5c" +
    "\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\047" +
    "\uff5c\050\uff5c\051\uff5c\053\uff5c\055\uff5c\056\uff5c\060\uff5c" +
    "\061\uff5c\070\uff5c\071\uff5c\072\uff5c\073\uff5c\075\uff5c\001" +
    "\002\000\006\013\uff8c\055\uff8c\001\002\000\006\013\224" +
    "\055\uff8e\001\002\000\004\055\223\001\002\000\074\004" +
    "\uff58\005\uff58\013\uff58\017\uff58\022\uff58\031\uff58\032\uff58" +
    "\035\uff58\036\uff58\037\uff58\040\uff58\041\uff58\042\uff58\043" +
    "\uff58\044\uff58\045\uff58\047\uff58\050\uff58\051\uff58\053\uff58" +
    "\055\uff58\056\uff58\060\uff58\061\uff58\070\uff58\071\uff58\072" +
    "\uff58\073\uff58\075\uff58\001\002\000\046\012\125\024\111" +
    "\037\120\042\112\043\121\046\126\050\123\051\110\057" +
    "\114\061\127\064\105\065\101\071\116\074\106\100\124" +
    "\101\107\102\071\106\115\001\002\000\006\013\uff8b\055" +
    "\uff8b\001\002\000\004\053\227\001\002\000\074\004\uff5b" +
    "\005\uff5b\013\uff5b\017\uff5b\022\uff5b\031\uff5b\032\uff5b\035" +
    "\uff5b\036\uff5b\037\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b" +
    "\044\uff5b\045\uff5b\047\uff5b\050\uff5b\051\uff5b\053\uff5b\055" +
    "\uff5b\056\uff5b\060\uff5b\061\uff5b\070\uff5b\071\uff5b\072\uff5b" +
    "\073\uff5b\075\uff5b\001\002\000\046\012\125\024\111\037" +
    "\120\042\112\043\121\046\126\050\123\051\110\057\114" +
    "\061\127\064\105\065\101\071\116\074\106\100\124\101" +
    "\107\102\071\106\115\001\002\000\016\013\uff88\035\uff88" +
    "\047\uff88\053\uff88\055\uff88\056\uff88\001\002\000\006\013" +
    "\uffb0\056\uffb0\001\002\000\006\013\234\056\235\001\002" +
    "\000\004\103\236\001\002\000\130\002\uffef\006\uffef\007" +
    "\uffef\010\uffef\012\uffef\014\uffef\015\uffef\016\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\033\uffef\035" +
    "\uffef\037\uffef\042\uffef\043\uffef\046\uffef\050\uffef\051\uffef" +
    "\052\uffef\054\uffef\057\uffef\061\uffef\062\uffef\063\uffef\064" +
    "\uffef\065\uffef\066\uffef\071\uffef\074\uffef\076\uffef\077\uffef" +
    "\100\uffef\101\uffef\102\uffef\103\uffef\104\uffef\105\uffef\106" +
    "\uffef\107\uffef\001\002\000\006\013\uffaf\056\uffaf\001\002" +
    "\000\032\002\ufffb\006\ufffb\014\ufffb\025\ufffb\027\ufffb\030" +
    "\ufffb\033\ufffb\062\ufffb\063\ufffb\066\ufffb\103\ufffb\107\ufffb" +
    "\001\002\000\010\036\uffd8\061\060\106\uffd8\001\002\000" +
    "\010\036\uffe0\061\uffe0\106\uffe0\001\002\000\004\011\262" +
    "\001\002\000\014\006\033\025\034\027\242\033\035\103" +
    "\031\001\002\000\010\036\uffd8\061\060\106\uffd8\001\002" +
    "\000\006\013\253\056\254\001\002\000\006\036\064\106" +
    "\uffd3\001\002\000\004\106\250\001\002\000\004\005\251" +
    "\001\002\000\046\012\125\024\111\037\120\042\112\043" +
    "\121\046\126\050\123\051\110\057\114\061\127\064\105" +
    "\065\101\071\116\074\106\100\124\101\107\102\071\106" +
    "\115\001\002\000\006\013\uffac\056\uffac\001\002\000\010" +
    "\036\uffd8\061\060\106\uffd8\001\002\000\130\002\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\033" +
    "\ufff2\035\ufff2\037\ufff2\042\ufff2\043\ufff2\046\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\054\ufff2\057\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\064\ufff2\065\ufff2\066\ufff2\071\ufff2\074\ufff2\076\ufff2" +
    "\077\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\105" +
    "\ufff2\106\ufff2\107\ufff2\001\002\000\006\036\064\106\uffd3" +
    "\001\002\000\004\106\257\001\002\000\004\005\260\001" +
    "\002\000\046\012\125\024\111\037\120\042\112\043\121" +
    "\046\126\050\123\051\110\057\114\061\127\064\105\065" +
    "\101\071\116\074\106\100\124\101\107\102\071\106\115" +
    "\001\002\000\006\013\uffab\056\uffab\001\002\000\014\006" +
    "\033\025\034\033\035\067\041\103\031\001\002\000\006" +
    "\037\uffb3\071\042\001\002\000\004\037\265\001\002\000" +
    "\016\006\033\025\034\027\032\033\035\055\uffb8\103\031" +
    "\001\002\000\004\055\267\001\002\000\010\036\uffdf\061" +
    "\uffdf\106\uffdf\001\002\000\006\036\064\106\uffd3\001\002" +
    "\000\006\013\272\056\273\001\002\000\010\036\uffd8\061" +
    "\060\106\uffd8\001\002\000\130\002\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\033\ufff3\035\ufff3" +
    "\037\ufff3\042\ufff3\043\ufff3\046\ufff3\050\ufff3\051\ufff3\052" +
    "\ufff3\054\ufff3\057\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\071\ufff3\074\ufff3\076\ufff3\077\ufff3\100" +
    "\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3\106\ufff3" +
    "\107\ufff3\001\002\000\006\036\064\106\uffd3\001\002\000" +
    "\004\106\276\001\002\000\010\005\300\013\uffa9\056\uffa9" +
    "\001\002\000\006\013\uffad\056\uffad\001\002\000\046\012" +
    "\125\024\111\037\120\042\112\043\121\046\126\050\123" +
    "\051\110\057\114\061\127\064\105\065\101\071\116\074" +
    "\106\100\124\101\107\102\071\106\115\001\002\000\006" +
    "\013\uffaa\056\uffaa\001\002\000\004\106\303\001\002\000" +
    "\010\005\300\013\uffa9\056\uffa9\001\002\000\006\013\uffae" +
    "\056\uffae\001\002\000\004\035\306\001\002\000\016\006" +
    "\uffee\025\uffee\027\uffee\030\uffee\033\uffee\103\uffee\001\002" +
    "\000\016\006\033\025\034\027\242\030\010\033\035\103" +
    "\031\001\002\000\010\036\uffd8\061\060\106\uffd8\001\002" +
    "\000\020\006\033\025\034\027\242\030\010\033\035\052" +
    "\314\103\031\001\002\000\020\006\uffec\025\uffec\027\uffec" +
    "\030\uffec\033\uffec\052\uffec\103\uffec\001\002\000\020\006" +
    "\uffe9\025\uffe9\027\uffe9\030\uffe9\033\uffe9\052\uffe9\103\uffe9" +
    "\001\002\000\004\056\316\001\002\000\020\006\uffeb\025" +
    "\uffeb\027\uffeb\030\uffeb\033\uffeb\052\uffeb\103\uffeb\001\002" +
    "\000\130\002\uffed\006\uffed\007\uffed\010\uffed\012\uffed\014" +
    "\uffed\015\uffed\016\uffed\023\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\030\uffed\033\uffed\035\uffed\037\uffed\042\uffed\043" +
    "\uffed\046\uffed\050\uffed\051\uffed\052\uffed\054\uffed\057\uffed" +
    "\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\071" +
    "\uffed\074\uffed\076\uffed\077\uffed\100\uffed\101\uffed\102\uffed" +
    "\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\001\002\000" +
    "\006\013\323\056\324\001\002\000\006\036\064\106\uffd3" +
    "\001\002\000\004\106\322\001\002\000\006\013\uffb2\056" +
    "\uffb2\001\002\000\010\036\uffd8\061\060\106\uffd8\001\002" +
    "\000\020\006\uffea\025\uffea\027\uffea\030\uffea\033\uffea\052" +
    "\uffea\103\uffea\001\002\000\006\036\064\106\uffd3\001\002" +
    "\000\004\106\327\001\002\000\006\013\uffb1\056\uffb1\001" +
    "\002\000\014\006\033\025\034\033\035\067\041\103\031" +
    "\001\002\000\006\071\042\106\uffb3\001\002\000\004\106" +
    "\333\001\002\000\004\037\uffe8\001\002\000\004\037\335" +
    "\001\002\000\016\006\033\025\034\027\032\033\035\055" +
    "\uffb8\103\031\001\002\000\004\055\337\001\002\000\004" +
    "\035\uffe7\001\002\000\004\035\341\001\002\000\122\006" +
    "\ufff0\007\372\010\361\012\125\014\ufff0\015\346\016\347" +
    "\023\366\024\111\025\ufff0\026\374\027\ufff0\033\ufff0\035" +
    "\354\037\120\042\112\043\121\046\126\050\123\051\110" +
    "\052\uffcc\054\351\057\114\061\127\062\014\063\011\064" +
    "\105\065\101\066\024\071\116\074\106\076\377\077\344" +
    "\100\124\101\107\102\071\103\ufff0\104\355\105\345\106" +
    "\115\001\002\000\122\006\uffbc\007\uffbc\010\uffbc\012\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\033\uffbc\035\uffbc\037\uffbc\042\uffbc\043\uffbc" +
    "\046\uffbc\050\uffbc\051\uffbc\052\uffbc\054\uffbc\057\uffbc\061" +
    "\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\071\uffbc" +
    "\074\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103" +
    "\uffbc\104\uffbc\105\uffbc\106\uffbc\001\002\000\122\006\uffbd" +
    "\007\uffbd\010\uffbd\012\uffbd\014\uffbd\015\uffbd\016\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\033\uffbd\035\uffbd" +
    "\037\uffbd\042\uffbd\043\uffbd\046\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\054\uffbd\057\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\065\uffbd\066\uffbd\071\uffbd\074\uffbd\076\uffbd\077\uffbd\100" +
    "\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd" +
    "\001\002\000\046\012\uffa3\024\uffa3\037\uffa3\042\uffa3\043" +
    "\uffa3\046\uffa3\050\uffa3\051\uffa3\057\uffa3\061\uffa3\064\uffa3" +
    "\065\uffa3\071\uffa3\074\uffa3\100\uffa3\101\uffa3\102\uffa3\106" +
    "\uffa3\001\002\000\046\012\125\024\111\037\120\042\112" +
    "\043\121\046\126\050\123\051\110\057\114\061\127\064" +
    "\105\065\101\071\116\074\106\100\124\101\107\102\071" +
    "\106\115\001\002\000\004\056\u012f\001\002\000\004\047" +
    "\u0127\001\002\000\122\006\uffbb\007\uffbb\010\uffbb\012\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\033\uffbb\035\uffbb\037\uffbb\042\uffbb\043\uffbb" +
    "\046\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb\057\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\071\uffbb" +
    "\074\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103" +
    "\uffbb\104\uffbb\105\uffbb\106\uffbb\001\002\000\050\012\125" +
    "\024\111\037\120\042\112\043\121\046\126\050\123\051" +
    "\110\056\u0125\057\114\061\127\064\105\065\101\071\116" +
    "\074\106\100\124\101\107\102\071\106\115\001\002\000" +
    "\122\006\uffba\007\uffba\010\uffba\012\uffba\014\uffba\015\uffba" +
    "\016\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\033" +
    "\uffba\035\uffba\037\uffba\042\uffba\043\uffba\046\uffba\050\uffba" +
    "\051\uffba\052\uffba\054\uffba\057\uffba\061\uffba\062\uffba\063" +
    "\uffba\064\uffba\065\uffba\066\uffba\071\uffba\074\uffba\076\uffba" +
    "\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105" +
    "\uffba\106\uffba\001\002\000\122\006\uffc3\007\uffc3\010\uffc3" +
    "\012\uffc3\014\uffc3\015\uffc3\016\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\033\uffc3\035\uffc3\037\uffc3\042\uffc3" +
    "\043\uffc3\046\uffc3\050\uffc3\051\uffc3\052\uffc3\054\uffc3\057" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\071\uffc3\074\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102" +
    "\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3\001\002\000\122" +
    "\006\uffd0\007\uffd0\010\uffd0\012\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\033\uffd0" +
    "\035\uffd0\037\uffd0\042\uffd0\043\uffd0\046\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\054\uffd0\057\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\064\uffd0\065\uffd0\066\uffd0\071\uffd0\074\uffd0\076\uffd0\077" +
    "\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0" +
    "\106\uffd0\001\002\000\046\012\125\024\111\037\120\042" +
    "\112\043\121\046\126\050\123\051\110\057\114\061\127" +
    "\064\105\065\101\071\116\074\106\100\124\101\107\102" +
    "\071\106\115\001\002\000\122\006\ufff0\007\372\010\361" +
    "\012\125\014\ufff0\015\346\016\347\023\366\024\111\025" +
    "\ufff0\026\374\027\ufff0\033\ufff0\035\354\037\120\042\112" +
    "\043\121\046\126\050\123\051\110\052\uffcd\054\351\057" +
    "\114\061\127\062\014\063\011\064\105\065\101\066\024" +
    "\071\116\074\106\076\377\077\344\100\124\101\107\102" +
    "\071\103\ufff0\104\355\105\345\106\115\001\002\000\122" +
    "\006\uffc6\007\uffc6\010\uffc6\012\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\033\uffc6" +
    "\035\uffc6\037\uffc6\042\uffc6\043\uffc6\046\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\054\uffc6\057\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\064\uffc6\065\uffc6\066\uffc6\071\uffc6\074\uffc6\076\uffc6\077" +
    "\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6" +
    "\106\uffc6\001\002\000\122\006\uffbe\007\uffbe\010\uffbe\012" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\033\uffbe\035\uffbe\037\uffbe\042\uffbe\043" +
    "\uffbe\046\uffbe\050\uffbe\051\uffbe\052\uffbe\054\uffbe\057\uffbe" +
    "\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\071" +
    "\uffbe\074\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe" +
    "\103\uffbe\104\uffbe\105\uffbe\106\uffbe\001\002\000\004\034" +
    "\u011a\001\002\000\122\006\uffc4\007\uffc4\010\uffc4\012\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\033\uffc4\035\uffc4\037\uffc4\042\uffc4\043\uffc4" +
    "\046\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\057\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\071\uffc4" +
    "\074\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103" +
    "\uffc4\104\uffc4\105\uffc4\106\uffc4\001\002\000\004\056\u0119" +
    "\001\002\000\122\006\uffc7\007\uffc7\010\uffc7\012\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\033\uffc7\035\uffc7\037\uffc7\042\uffc7\043\uffc7\046" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7\057\uffc7\061\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\071\uffc7\074" +
    "\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7" +
    "\104\uffc7\105\uffc7\106\uffc7\001\002\000\004\052\u0118\001" +
    "\002\000\004\037\u0114\001\002\000\122\006\uffc2\007\uffc2" +
    "\010\uffc2\012\uffc2\014\uffc2\015\uffc2\016\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\033\uffc2\035\uffc2\037\uffc2" +
    "\042\uffc2\043\uffc2\046\uffc2\050\uffc2\051\uffc2\052\uffc2\054" +
    "\uffc2\057\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2" +
    "\066\uffc2\071\uffc2\074\uffc2\076\uffc2\077\uffc2\100\uffc2\101" +
    "\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\001\002" +
    "\000\122\006\uffc9\007\uffc9\010\uffc9\012\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9" +
    "\033\uffc9\035\uffc9\037\uffc9\042\uffc9\043\uffc9\046\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\054\uffc9\057\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\071\uffc9\074\uffc9\076" +
    "\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9" +
    "\105\uffc9\106\uffc9\001\002\000\122\006\uffcb\007\uffcb\010" +
    "\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\033\uffcb\035\uffcb\037\uffcb\042" +
    "\uffcb\043\uffcb\046\uffcb\050\uffcb\051\uffcb\052\uffcb\054\uffcb" +
    "\057\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\071\uffcb\074\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb" +
    "\102\uffcb\103\uffcb\104\uffcb\105\uffcb\106\uffcb\001\002\000" +
    "\004\056\u0113\001\002\000\122\006\uffc8\007\uffc8\010\uffc8" +
    "\012\uffc8\014\uffc8\015\uffc8\016\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\033\uffc8\035\uffc8\037\uffc8\042\uffc8" +
    "\043\uffc8\046\uffc8\050\uffc8\051\uffc8\052\uffc8\054\uffc8\057" +
    "\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\071\uffc8\074\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102" +
    "\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\001\002\000\004" +
    "\037\uff9f\001\002\000\122\006\uffc0\007\uffc0\010\uffc0\012" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\033\uffc0\035\uffc0\037\uffc0\042\uffc0\043" +
    "\uffc0\046\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0\057\uffc0" +
    "\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\071" +
    "\uffc0\074\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0" +
    "\103\uffc0\104\uffc0\105\uffc0\106\uffc0\001\002\000\122\006" +
    "\uffbf\007\uffbf\010\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\033\uffbf\035" +
    "\uffbf\037\uffbf\042\uffbf\043\uffbf\046\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\054\uffbf\057\uffbf\061\uffbf\062\uffbf\063\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\071\uffbf\074\uffbf\076\uffbf\077\uffbf" +
    "\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106" +
    "\uffbf\001\002\000\046\012\125\024\111\037\120\042\112" +
    "\043\121\046\126\050\123\051\110\057\114\061\127\064" +
    "\105\065\101\071\116\074\106\100\124\101\107\102\071" +
    "\106\115\001\002\000\122\006\uffc1\007\uffc1\010\uffc1\012" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\033\uffc1\035\uffc1\037\uffc1\042\uffc1\043" +
    "\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1\054\uffc1\057\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\071" +
    "\uffc1\074\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1" +
    "\103\uffc1\104\uffc1\105\uffc1\106\uffc1\001\002\000\004\035" +
    "\uffa8\001\002\000\004\035\354\001\002\000\124\006\uffa7" +
    "\007\uffa7\010\uffa7\012\uffa7\014\uffa7\015\uffa7\016\uffa7\020" +
    "\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\033\uffa7" +
    "\035\uffa7\037\uffa7\042\uffa7\043\uffa7\046\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\054\uffa7\057\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\065\uffa7\066\uffa7\071\uffa7\074\uffa7\076\uffa7\077" +
    "\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7" +
    "\106\uffa7\001\002\000\124\006\uffa4\007\uffa4\010\uffa4\012" +
    "\uffa4\014\uffa4\015\uffa4\016\uffa4\020\u0106\023\uffa4\024\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\033\uffa4\035\uffa4\037\uffa4\042" +
    "\uffa4\043\uffa4\046\uffa4\050\uffa4\051\uffa4\052\uffa4\054\uffa4" +
    "\057\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066" +
    "\uffa4\071\uffa4\074\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4" +
    "\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4\001\002\000" +
    "\122\006\uffa6\007\uffa6\010\uffa6\012\uffa6\014\uffa6\015\uffa6" +
    "\016\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\033" +
    "\uffa6\035\uffa6\037\uffa6\042\uffa6\043\uffa6\046\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\054\uffa6\057\uffa6\061\uffa6\062\uffa6\063" +
    "\uffa6\064\uffa6\065\uffa6\066\uffa6\071\uffa6\074\uffa6\076\uffa6" +
    "\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105" +
    "\uffa6\106\uffa6\001\002\000\004\035\354\001\002\000\122" +
    "\006\uffa5\007\uffa5\010\uffa5\012\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\033\uffa5" +
    "\035\uffa5\037\uffa5\042\uffa5\043\uffa5\046\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\054\uffa5\057\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\065\uffa5\066\uffa5\071\uffa5\074\uffa5\076\uffa5\077" +
    "\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5" +
    "\106\uffa5\001\002\000\004\037\u0109\001\002\000\014\006" +
    "\033\025\034\027\032\033\035\103\031\001\002\000\006" +
    "\071\042\106\uffb3\001\002\000\004\011\u010c\001\002\000" +
    "\046\012\125\024\111\037\120\042\112\043\121\046\126" +
    "\050\123\051\110\057\114\061\127\064\105\065\101\071" +
    "\116\074\106\100\124\101\107\102\071\106\115\001\002" +
    "\000\004\055\u010e\001\002\000\004\035\uff9e\001\002\000" +
    "\004\035\354\001\002\000\122\006\uff9d\007\uff9d\010\uff9d" +
    "\012\uff9d\014\uff9d\015\uff9d\016\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\033\uff9d\035\uff9d\037\uff9d\042\uff9d" +
    "\043\uff9d\046\uff9d\050\uff9d\051\uff9d\052\uff9d\054\uff9d\057" +
    "\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\071\uff9d\074\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d\102" +
    "\uff9d\103\uff9d\104\uff9d\105\uff9d\106\uff9d\001\002\000\004" +
    "\106\u0112\001\002\000\004\011\uffa0\001\002\000\122\006" +
    "\uff9c\007\uff9c\010\uff9c\012\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\033\uff9c\035" +
    "\uff9c\037\uff9c\042\uff9c\043\uff9c\046\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\054\uff9c\057\uff9c\061\uff9c\062\uff9c\063\uff9c\064" +
    "\uff9c\065\uff9c\066\uff9c\071\uff9c\074\uff9c\076\uff9c\077\uff9c" +
    "\100\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\106" +
    "\uff9c\001\002\000\046\012\125\024\111\037\120\042\112" +
    "\043\121\046\126\050\123\051\110\057\114\061\127\064" +
    "\105\065\101\071\116\074\106\100\124\101\107\102\071" +
    "\106\115\001\002\000\004\055\u0116\001\002\000\004\056" +
    "\u0117\001\002\000\122\006\uff99\007\uff99\010\uff99\012\uff99" +
    "\014\uff99\015\uff99\016\uff99\023\uff99\024\uff99\025\uff99\026" +
    "\uff99\027\uff99\033\uff99\035\uff99\037\uff99\042\uff99\043\uff99" +
    "\046\uff99\050\uff99\051\uff99\052\uff99\054\uff99\057\uff99\061" +
    "\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\071\uff99" +
    "\074\uff99\076\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103" +
    "\uff99\104\uff99\105\uff99\106\uff99\001\002\000\034\002\uffe6" +
    "\006\uffe6\014\uffe6\025\uffe6\027\uffe6\030\uffe6\033\uffe6\052" +
    "\uffe6\062\uffe6\063\uffe6\066\uffe6\103\uffe6\107\uffe6\001\002" +
    "\000\122\006\uffc5\007\uffc5\010\uffc5\012\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\033\uffc5\035\uffc5\037\uffc5\042\uffc5\043\uffc5\046\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\054\uffc5\057\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\066\uffc5\071\uffc5\074\uffc5\076" +
    "\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5" +
    "\105\uffc5\106\uffc5\001\002\000\046\012\125\024\111\037" +
    "\120\042\112\043\121\046\126\050\123\051\110\057\114" +
    "\061\127\064\105\065\101\071\116\074\106\100\124\101" +
    "\107\102\071\106\115\001\002\000\004\056\u011c\001\002" +
    "\000\122\006\uff95\007\uff95\010\uff95\012\uff95\014\uff95\015" +
    "\uff95\016\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95" +
    "\033\uff95\035\uff95\037\uff95\042\uff95\043\uff95\046\uff95\050" +
    "\uff95\051\uff95\052\uff95\054\uff95\057\uff95\061\uff95\062\uff95" +
    "\063\uff95\064\uff95\065\uff95\066\uff95\071\uff95\074\uff95\076" +
    "\uff95\077\uff95\100\uff95\101\uff95\102\uff95\103\uff95\104\uff95" +
    "\105\uff95\106\uff95\001\002\000\122\006\uffca\007\uffca\010" +
    "\uffca\012\uffca\014\uffca\015\uffca\016\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\033\uffca\035\uffca\037\uffca\042" +
    "\uffca\043\uffca\046\uffca\050\uffca\051\uffca\052\uffca\054\uffca" +
    "\057\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066" +
    "\uffca\071\uffca\074\uffca\076\uffca\077\uffca\100\uffca\101\uffca" +
    "\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca\001\002\000" +
    "\004\056\u011f\001\002\000\122\006\uff98\007\uff98\010\uff98" +
    "\012\uff98\014\uff98\015\uff98\016\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\033\uff98\035\uff98\037\uff98\042\uff98" +
    "\043\uff98\046\uff98\050\uff98\051\uff98\052\uff98\054\uff98\057" +
    "\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98" +
    "\071\uff98\074\uff98\076\uff98\077\uff98\100\uff98\101\uff98\102" +
    "\uff98\103\uff98\104\uff98\105\uff98\106\uff98\001\002\000\122" +
    "\006\ufff0\007\372\010\361\012\125\014\ufff0\015\346\016" +
    "\347\023\366\024\111\025\ufff0\026\374\027\ufff0\033\ufff0" +
    "\035\354\037\120\042\112\043\121\046\126\050\123\051" +
    "\110\052\uffcc\054\351\057\114\061\127\062\014\063\011" +
    "\064\105\065\101\066\024\071\116\074\106\076\377\077" +
    "\344\100\124\101\107\102\071\103\ufff0\104\355\105\345" +
    "\106\115\001\002\000\004\052\uffcf\001\002\000\004\052" +
    "\u0123\001\002\000\124\006\uffce\007\uffce\010\uffce\012\uffce" +
    "\014\uffce\015\uffce\016\uffce\020\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\033\uffce\035\uffce\037\uffce\042\uffce" +
    "\043\uffce\046\uffce\050\uffce\051\uffce\052\uffce\054\uffce\057" +
    "\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce" +
    "\071\uffce\074\uffce\076\uffce\077\uffce\100\uffce\101\uffce\102" +
    "\uffce\103\uffce\104\uffce\105\uffce\106\uffce\001\002\000\004" +
    "\056\u0126\001\002\000\122\006\uff97\007\uff97\010\uff97\012" +
    "\uff97\014\uff97\015\uff97\016\uff97\023\uff97\024\uff97\025\uff97" +
    "\026\uff97\027\uff97\033\uff97\035\uff97\037\uff97\042\uff97\043" +
    "\uff97\046\uff97\050\uff97\051\uff97\052\uff97\054\uff97\057\uff97" +
    "\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\071" +
    "\uff97\074\uff97\076\uff97\077\uff97\100\uff97\101\uff97\102\uff97" +
    "\103\uff97\104\uff97\105\uff97\106\uff97\001\002\000\122\006" +
    "\uff96\007\uff96\010\uff96\012\uff96\014\uff96\015\uff96\016\uff96" +
    "\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\033\uff96\035" +
    "\uff96\037\uff96\042\uff96\043\uff96\046\uff96\050\uff96\051\uff96" +
    "\052\uff96\054\uff96\057\uff96\061\uff96\062\uff96\063\uff96\064" +
    "\uff96\065\uff96\066\uff96\071\uff96\074\uff96\076\uff96\077\uff96" +
    "\100\uff96\101\uff96\102\uff96\103\uff96\104\uff96\105\uff96\106" +
    "\uff96\001\002\000\050\012\125\021\u012a\024\111\037\120" +
    "\042\112\043\121\046\126\050\123\051\110\057\114\061" +
    "\127\064\105\065\101\071\116\074\106\100\124\101\107" +
    "\102\071\106\115\001\002\000\006\047\u012c\056\u012d\001" +
    "\002\000\006\047\uff93\056\uff93\001\002\000\006\047\uff90" +
    "\056\uff90\001\002\000\006\047\uff91\056\uff91\001\002\000" +
    "\050\012\125\021\u012a\024\111\037\120\042\112\043\121" +
    "\046\126\050\123\051\110\057\114\061\127\064\105\065" +
    "\101\071\116\074\106\100\124\101\107\102\071\106\115" +
    "\001\002\000\122\006\uff94\007\uff94\010\uff94\012\uff94\014" +
    "\uff94\015\uff94\016\uff94\023\uff94\024\uff94\025\uff94\026\uff94" +
    "\027\uff94\033\uff94\035\uff94\037\uff94\042\uff94\043\uff94\046" +
    "\uff94\050\uff94\051\uff94\052\uff94\054\uff94\057\uff94\061\uff94" +
    "\062\uff94\063\uff94\064\uff94\065\uff94\066\uff94\071\uff94\074" +
    "\uff94\076\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94" +
    "\104\uff94\105\uff94\106\uff94\001\002\000\006\047\uff92\056" +
    "\uff92\001\002\000\122\006\uff9b\007\uff9b\010\uff9b\012\uff9b" +
    "\014\uff9b\015\uff9b\016\uff9b\023\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\027\uff9b\033\uff9b\035\uff9b\037\uff9b\042\uff9b\043\uff9b" +
    "\046\uff9b\050\uff9b\051\uff9b\052\uff9b\054\uff9b\057\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\071\uff9b" +
    "\074\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103" +
    "\uff9b\104\uff9b\105\uff9b\106\uff9b\001\002\000\004\056\u0131" +
    "\001\002\000\122\006\uff9a\007\uff9a\010\uff9a\012\uff9a\014" +
    "\uff9a\015\uff9a\016\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\033\uff9a\035\uff9a\037\uff9a\042\uff9a\043\uff9a\046" +
    "\uff9a\050\uff9a\051\uff9a\052\uff9a\054\uff9a\057\uff9a\061\uff9a" +
    "\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\071\uff9a\074" +
    "\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\103\uff9a" +
    "\104\uff9a\105\uff9a\106\uff9a\001\002\000\046\012\125\024" +
    "\111\037\120\042\112\043\121\046\126\050\123\051\110" +
    "\057\114\061\127\064\105\065\101\071\116\074\106\100" +
    "\124\101\107\102\071\106\115\001\002\000\004\035\uffa2" +
    "\001\002\000\004\035\354\001\002\000\122\006\uffa1\007" +
    "\uffa1\010\uffa1\012\uffa1\014\uffa1\015\uffa1\016\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\033\uffa1\035\uffa1\037" +
    "\uffa1\042\uffa1\043\uffa1\046\uffa1\050\uffa1\051\uffa1\052\uffa1" +
    "\054\uffa1\057\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\071\uffa1\074\uffa1\076\uffa1\077\uffa1\100\uffa1" +
    "\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\001" +
    "\002\000\010\036\uffd8\061\060\106\uffd8\001\002\000\004" +
    "\011\u0138\001\002\000\014\006\033\025\034\033\035\067" +
    "\041\103\031\001\002\000\004\106\u013a\001\002\000\004" +
    "\037\uffe5\001\002\000\004\037\u013c\001\002\000\016\006" +
    "\033\025\034\027\032\033\035\055\uffb8\103\031\001\002" +
    "\000\004\055\u013e\001\002\000\004\056\uffe4\001\002\000" +
    "\004\056\u0140\001\002\000\032\002\uffe3\006\uffe3\014\uffe3" +
    "\025\uffe3\027\uffe3\030\uffe3\033\uffe3\062\uffe3\063\uffe3\066" +
    "\uffe3\103\uffe3\107\uffe3\001\002\000\006\013\323\056\u0142" +
    "\001\002\000\032\002\ufff4\006\ufff4\014\ufff4\025\ufff4\027" +
    "\ufff4\030\ufff4\033\ufff4\062\ufff4\063\ufff4\066\ufff4\103\ufff4" +
    "\107\ufff4\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\006\003\003\114\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\016\015\022\022\030\005" +
    "\031\020\034\012\036\014\065\016\076\011\001\001\000" +
    "\002\001\001\000\012\066\024\071\026\072\240\074\u0135" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\066" +
    "\024\071\026\072\240\074\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\016\015\022\022\030\005\031\020" +
    "\034\012\036\236\065\016\076\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\066\024" +
    "\071\026\072\027\073\025\001\001\000\002\001\001\000" +
    "\004\101\232\001\001\000\002\001\001\000\010\011\055" +
    "\013\062\014\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\066\024\071\026\072\036\075\037\001\001\000" +
    "\010\011\055\013\060\014\056\001\001\000\004\077\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\064\046\066\024\071\026\072\027\073\044" +
    "\105\047\106\045\001\001\000\004\077\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\064\052\066\024\071\026\072\027\073" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\064\001\001\000\042\015\116\045\121\046\112\047" +
    "\103\050\102\051\101\052\077\053\075\054\072\055\071" +
    "\056\067\057\066\060\065\061\074\062\073\070\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\205" +
    "\001\001\000\004\041\200\001\001\000\002\001\001\000" +
    "\004\043\173\001\001\000\004\044\164\001\001\000\002" +
    "\001\001\000\004\015\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\133\153\001\001\000\004\132\147\001" +
    "\001\000\002\001\001\000\014\015\116\045\121\060\146" +
    "\061\074\062\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\116\045" +
    "\121\060\140\061\074\062\073\001\001\000\014\015\116" +
    "\045\121\060\137\061\074\062\073\001\001\000\050\015" +
    "\116\045\121\046\132\047\103\050\102\051\101\052\077" +
    "\053\075\054\072\055\071\056\067\057\066\060\065\061" +
    "\074\062\073\066\024\071\026\072\027\073\133\001\001" +
    "\000\002\001\001\000\014\015\116\045\121\060\131\061" +
    "\074\062\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\116\045" +
    "\121\060\127\061\074\062\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\116\045\121\060\135\061\074" +
    "\062\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\015\116\045\121" +
    "\060\142\061\074\062\073\066\024\071\026\072\027\073" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\015\116\045\121\050\152\051\101\052\077" +
    "\053\075\054\072\055\071\056\067\057\066\060\151\061" +
    "\074\062\073\001\001\000\002\001\001\000\004\133\153" +
    "\001\001\000\002\001\001\000\032\015\116\045\121\051" +
    "\155\052\077\053\075\054\072\055\071\056\067\057\066" +
    "\060\151\061\074\062\073\001\001\000\002\001\001\000" +
    "\030\015\116\045\121\052\157\053\075\054\072\055\071" +
    "\056\067\057\066\060\151\061\074\062\073\001\001\000" +
    "\002\001\001\000\026\015\116\045\121\053\161\054\072" +
    "\055\071\056\067\057\066\060\151\061\074\062\073\001" +
    "\001\000\002\001\001\000\024\015\116\045\121\054\163" +
    "\055\071\056\067\057\066\060\151\061\074\062\073\001" +
    "\001\000\004\044\164\001\001\000\022\015\116\045\121" +
    "\055\167\056\067\057\066\060\151\061\074\062\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\116\045\121\056\175\057\066\060\151" +
    "\061\074\062\073\001\001\000\002\001\001\000\004\041" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\015\116\045\121\057\201\060\151\061\074\062\073\001" +
    "\001\000\004\042\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\116\045\121\060" +
    "\206\061\074\062\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\015\116\045\121\046\225\047\103\050" +
    "\102\051\101\052\077\053\075\054\072\055\071\056\067" +
    "\057\066\060\065\061\074\062\073\001\001\000\044\015" +
    "\116\045\121\046\217\047\103\050\102\051\101\052\077" +
    "\053\075\054\072\055\071\056\067\057\066\060\065\061" +
    "\074\062\073\107\220\110\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\015\116\045\121\046" +
    "\224\047\103\050\102\051\101\052\077\053\075\054\072" +
    "\055\071\056\067\057\066\060\065\061\074\062\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\015\116\045\121\046\230\047\103\050\102\051" +
    "\101\052\077\053\075\054\072\055\071\056\067\057\066" +
    "\060\065\061\074\062\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\055\013\267\014\056\111\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\066\024\071\026\072\240\074" +
    "\243\001\001\000\012\011\055\013\245\014\056\112\244" +
    "\001\001\000\002\001\001\000\004\012\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\015\116\045\121" +
    "\046\112\047\103\050\102\051\101\052\077\053\075\054" +
    "\072\055\071\056\067\057\066\060\065\061\074\062\073" +
    "\070\251\001\001\000\002\001\001\000\010\011\055\013" +
    "\254\014\056\001\001\000\002\001\001\000\004\012\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\015" +
    "\116\045\121\046\112\047\103\050\102\051\101\052\077" +
    "\053\075\054\072\055\071\056\067\057\066\060\065\061" +
    "\074\062\073\070\260\001\001\000\002\001\001\000\012" +
    "\066\024\071\026\072\036\075\262\001\001\000\004\077" +
    "\263\001\001\000\002\001\001\000\020\064\046\066\024" +
    "\071\026\072\027\073\044\105\265\106\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\301\001\001" +
    "\000\002\001\001\000\010\011\055\013\273\014\056\001" +
    "\001\000\002\001\001\000\004\012\274\001\001\000\002" +
    "\001\001\000\004\067\276\001\001\000\002\001\001\000" +
    "\040\015\116\045\121\046\300\047\103\050\102\051\101" +
    "\052\077\053\075\054\072\055\071\056\067\057\066\060" +
    "\065\061\074\062\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\067\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\115\306\001\001\000\020\065\312" +
    "\066\024\071\026\072\240\074\307\100\310\104\311\001" +
    "\001\000\012\011\055\013\317\014\056\113\316\001\001" +
    "\000\016\065\312\066\024\071\026\072\240\074\307\104" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\055\013\324\014\056\001\001\000" +
    "\002\001\001\000\004\012\325\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\066\024\071\026\072\036\075" +
    "\330\001\001\000\004\077\331\001\001\000\002\001\001" +
    "\000\004\116\333\001\001\000\002\001\001\000\020\064" +
    "\046\066\024\071\026\072\027\073\044\105\335\106\045" +
    "\001\001\000\002\001\001\000\004\117\337\001\001\000" +
    "\002\001\001\000\106\015\116\016\363\017\375\020\357" +
    "\021\366\022\372\023\352\024\377\025\374\026\342\027" +
    "\347\032\351\033\361\034\367\035\341\037\356\040\370" +
    "\045\121\046\362\047\103\050\102\051\101\052\077\053" +
    "\075\054\072\055\071\056\067\057\066\060\065\061\074" +
    "\062\073\076\011\102\364\103\355\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\126\u0131\001\001\000\014" +
    "\015\116\045\121\060\u012f\061\074\062\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\015\116\045\121\046\u0123\047\103\050\102\051\101\052" +
    "\077\053\075\054\072\055\071\056\067\057\066\060\065" +
    "\061\074\062\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\u011f\001\001\000\014\015\116\045\121" +
    "\060\u011d\061\074\062\073\001\001\000\102\015\116\016" +
    "\363\017\375\020\357\021\366\022\372\023\352\024\377" +
    "\025\374\026\342\027\347\032\351\033\361\034\367\035" +
    "\341\037\356\040\u011c\045\121\046\362\047\103\050\102" +
    "\051\101\052\077\053\075\054\072\055\071\056\067\057" +
    "\066\060\065\061\074\062\073\076\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\130\u0107\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\015\116\045\121\046\u0100\047\103\050\102\051\101" +
    "\052\077\053\075\054\072\055\071\056\067\057\066\060" +
    "\065\061\074\062\073\001\001\000\002\001\001\000\004" +
    "\124\u0101\001\001\000\004\037\u0102\001\001\000\004\125" +
    "\u0103\001\001\000\004\010\u0104\001\001\000\002\001\001" +
    "\000\004\037\u0106\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\063\u010a\066\024\071\026\072\027\073\u0109" +
    "\001\001\000\004\077\u0110\001\001\000\002\001\001\000" +
    "\040\015\116\045\121\046\u010c\047\103\050\102\051\101" +
    "\052\077\053\075\054\072\055\071\056\067\057\066\060" +
    "\065\061\074\062\073\001\001\000\002\001\001\000\004" +
    "\131\u010e\001\001\000\004\037\u010f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\015\116\045\121\046\u0114\047\103\050\102\051" +
    "\101\052\077\053\075\054\072\055\071\056\067\057\066" +
    "\060\065\061\074\062\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\116\045\121\060\u011a\061\074\062" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\106\015" +
    "\116\016\363\017\375\020\357\021\366\022\372\023\352" +
    "\024\377\025\374\026\342\027\347\032\351\033\361\034" +
    "\367\035\341\037\356\040\370\045\121\046\362\047\103" +
    "\050\102\051\101\052\077\053\075\054\072\055\071\056" +
    "\067\057\066\060\065\061\074\062\073\076\011\102\u0120" +
    "\103\355\001\001\000\004\123\u0121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\006\u0127\007\u0128\015\116\045" +
    "\121\046\u012a\047\103\050\102\051\101\052\077\053\075" +
    "\054\072\055\071\056\067\057\066\060\065\061\074\062" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\007\u012d\015\116\045" +
    "\121\046\u012a\047\103\050\102\051\101\052\077\053\075" +
    "\054\072\055\071\056\067\057\066\060\065\061\074\062" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\015" +
    "\116\045\121\046\u0132\047\103\050\102\051\101\052\077" +
    "\053\075\054\072\055\071\056\067\057\066\060\065\061" +
    "\074\062\073\001\001\000\004\127\u0133\001\001\000\004" +
    "\037\u0134\001\001\000\002\001\001\000\012\011\055\013" +
    "\317\014\056\113\u0140\001\001\000\002\001\001\000\012" +
    "\066\024\071\026\072\036\075\u0138\001\001\000\002\001" +
    "\001\000\004\120\u013a\001\001\000\002\001\001\000\020" +
    "\064\046\066\024\071\026\072\027\073\044\105\u013c\106" +
    "\045\001\001\000\002\001\001\000\004\121\u013e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // QualIdent ::= T_ID_U 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoQualIdent (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*QualIdent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                        ((MyParser) parser).WriteID(RESULT, _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator4_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Designator3 ::= T_THIS 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("this", new StructType("this"), 4.0);	//Needs to be StructType, becuase THIS references a Struct
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                        RESULT = new ExprSTO ("nullptr", new NullPointerType());
                        ((MyParser) parser).WriteNull(RESULT);
                    
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("false", new BoolType(), BoolType.FALSE);
                        ((MyParser) parser).WriteBoolLiteral(RESULT, MyParser.FALSE_S);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("true", new BoolType(), BoolType.TRUE);
                        ((MyParser) parser).WriteBoolLiteral(RESULT, MyParser.TRUE_S);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO c = new ConstSTO (_1, new StringType(), 4.0);
                        ((MyParser) parser).WriteStringLiteral(_1);
                        RESULT = c;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO c = new ConstSTO (_1, new FloatType(), Double.parseDouble(_1));
                        ((MyParser) parser).WriteFloatLiteral(c);
                        
                        RESULT = c;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1, new IntType(), Double.parseDouble(_1));
                        ((MyParser) parser).WriteIntLiteral(RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoParens(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      RESULT = ((MyParser) parser).DoFuncCall (_1, _2);  
                      if(_1 instanceof FuncSTO)
                      ((MyParser) parser).WriteFuncCall((FuncSTO) _1, _2, RESULT);
                      //else
                      //((MyParser) parser).WriteFuncCall((VarSTO) _1, _2, RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Designator2 ::= Designator2 IncDecOp 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, Operator.newOp("P"+_2), _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoArrowDeref(_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      RESULT = ((MyParser) parser).DoDesignator2_Array (_1, _2);
                      ((MyParser) parser).WriteArrayIndex(_1, _2, RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                        ((MyParser) parser).WriteDot(_1, _3, RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Designator ::= IncDecOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_2, Operator.newOp(_1+"P"), _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Designator ::= T_LPAREN Type T_RPAREN Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoCast(_1, _2);
						((MyParser) parser).WriteCast(_2, RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Designator ::= T_SIZEOF T_LPAREN Type T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = ((MyParser) parser).DoSizeOf(_2);
						((MyParser) parser).WriteSizeOf(RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = ((MyParser) parser).DoSizeOf(_2);
						((MyParser) parser).WriteSizeOf(RESULT);
						
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoNotOp (_2);
						
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _1 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoBinaryExpr(_2, _1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	RESULT = ((MyParser)parser).DoAddressOf(_1);
						((MyParser) parser).WriteAmpersand(_1, RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						_1.setIsModifiable(true);
						_1.setIsAddressable(true);
						RESULT = ((MyParser) parser).DoDeref(_1);
						((MyParser) parser).WriteDeRef(_1, RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // IncDecOp ::= T_MINUSMINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // IncDecOp ::= T_PLUSPLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // MulOp ::= T_MOD 
            {
              Operator RESULT = null;
		
                        RESULT = new ModulusOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // MulOp ::= T_SLASH 
            {
              Operator RESULT = null;
		
                        RESULT = new DivideOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // MulOp ::= T_STAR 
            {
              Operator RESULT = null;
		
                        RESULT = new MultiplyOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // AddOp ::= T_MINUS 
            {
              Operator RESULT = null;
		
                        RESULT = new MinusOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // AddOp ::= T_PLUS 
            {
              Operator RESULT = null;
		
                        RESULT = new PlusOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Relation ::= T_GTE 
            {
              Operator RESULT = null;
		
                 	RESULT = new EqualityOp(Operator.GTE);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Relation ::= T_LTE 
            {
              Operator RESULT = null;
		
                 	RESULT = new EqualityOp(Operator.LTE);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Relation ::= T_GT 
            {
              Operator RESULT = null;
		
                 	RESULT = new EqualityOp(Operator.GT);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Relation ::= T_LT 
            {
              Operator RESULT = null;
		
                 	RESULT = new EqualityOp(Operator.LT);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Equality ::= T_NEQ 
            {
              Operator RESULT = null;
		
                 	RESULT = new EqualityOp(Operator.NEQ);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Equality ::= T_EQU 
            {
              Operator RESULT = null;
		
                 	RESULT = new EqualityOp(Operator.EQ);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Expr8 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Expr8 ::= Expr8 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Expr7 ::= Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Expr7 ::= Expr7 AddOp Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);                   
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Expr6 ::= Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Expr6 ::= Expr6 Relation Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Expr5 ::= Expr5 Equality Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Expr4 ::= Expr4 T_AMPERSAND Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AmpersandOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Expr3 ::= Expr3 T_CARET Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new CaretOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Expr2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Expr2 ::= Expr2 T_BAR Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BarOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
                
              CUP$parser$result = new java_cup.runtime.Symbol(38/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Expr1 ::= Expr1 NT$15 T_AND Expr2 
            {
              STO RESULT = null;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                	RESULT = ((MyParser) parser).DoBinaryExpr (_1, new RelationOp("&&"), _3); // may cause errors in future?
                	((MyParser) parser).WriteEqStmt_2(_3, RESULT, MyParser.AND_FLAG);
                
              CUP$parser$result = new java_cup.runtime.Symbol(38/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$15 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

					((MyParser) parser).WriteEqStmt_1(_1, MyParser.AND_FLAG);
				
              CUP$parser$result = new java_cup.runtime.Symbol(89/*NT$15*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
                
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Expr0 ::= Expr0 NT$14 T_OR Expr1 
            {
              STO RESULT = null;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                	RESULT = ((MyParser) parser).DoBinaryExpr (_1, new RelationOp("||"), _3); 
                	((MyParser) parser).WriteEqStmt_2(_3, RESULT, MyParser.OR_FLAG);
                
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$14 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

					((MyParser) parser).WriteEqStmt_1(_1, MyParser.OR_FLAG);
				
              CUP$parser$result = new java_cup.runtime.Symbol(88/*NT$14*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                        ((MyParser) parser).WriteAssignExpr(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // UnarySign ::= T_MINUS 
            {
              Operator RESULT = null;
		
					RESULT = new NegOp();
				
              CUP$parser$result = new java_cup.runtime.Symbol(35/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // UnarySign ::= T_PLUS 
            {
              Operator RESULT = null;
		
					RESULT = new PlusOp();
				
              CUP$parser$result = new java_cup.runtime.Symbol(35/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExprList ::= ExprList T_COMMA Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    				RESULT = _1;
    				RESULT.addElement(_2);
    			
              CUP$parser$result = new java_cup.runtime.Symbol(69/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ExprList ::= Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = new Vector<STO> ();
					RESULT.addElement(_1);
				
              CUP$parser$result = new java_cup.runtime.Symbol(69/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OptExprList ::= 
            {
              Vector RESULT = null;
		
    					RESULT = new Vector<STO> ();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(70/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OptExprList ::= ExprList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(70/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ConstExpr ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(54/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // WritePair ::= T_ENDL 
            {
              Object RESULT = null;
		
    				((MyParser) parser).WriteENDL();
    				RESULT = "endl";
    			
              CUP$parser$result = new java_cup.runtime.Symbol(5/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // WritePair ::= Expr 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					((MyParser) parser).COut(_1);
					RESULT = _1.getName();
				
              CUP$parser$result = new java_cup.runtime.Symbol(5/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1 + " << " + _2;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(4/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // WritePairList ::= WritePair 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(4/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              String RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = "cout << " + _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(24/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						((MyParser) parser).DoCIn(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    				((MyParser) parser).DoReturn(_1);
    				((MyParser) parser).WriteReturn(_1);
    			
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              String RESULT = null;
		
					((MyParser) parser).DoReturn(null);
					((MyParser) parser).WriteReturn(null);
				
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NewStmt ::= T_NEW Designator T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						((MyParser) parser).DoAllocCheck("new", _1);
						((MyParser) parser).WriteNewStmt(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(14/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						RESULT = ((MyParser) parser).DoExprIntCheck(_1);
						((MyParser) parser).WriteExit(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						((MyParser) parser).DoAllocCheck("delete", _1);
						((MyParser) parser).WriteDeleteStmt(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(13/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ContinueStmt ::= T_CONTINUE T_SEMI 
            {
              String RESULT = null;
		
						((MyParser) parser).WriteContBr(MyParser.CONTINUE);
					
              CUP$parser$result = new java_cup.runtime.Symbol(19/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BreakStmt ::= T_BREAK T_SEMI 
            {
              String RESULT = null;
		
						((MyParser) parser).WriteContBr(MyParser.BREAK);
					
              CUP$parser$result = new java_cup.runtime.Symbol(18/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ForeachStmt ::= T_FOREACH NT$12 T_LPAREN IterationVarDecl T_COLON Expr T_RPAREN NT$13 CodeBlock 
            {
              String RESULT = null;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
						((MyParser) parser).WriteForEnd();
                        ((MyParser) parser).DoBlockClose();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(15/*ForeachStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$13 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen();
                        RESULT = ((MyParser) parser).DoIterationVarDecl ((VarSTO) _1, _2);
                        ((MyParser) parser).WriteForMiddle((VarSTO) _1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(87/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$12 ::= 
            {
              Object RESULT = null;

						((MyParser) parser).WriteForWhileBegin("for");
					
              CUP$parser$result = new java_cup.runtime.Symbol(86/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IterationVarDecl ::= Type OptRef T_ID 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean _3 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new VarSTO(_1, _2);
                        ((VarSTO) RESULT).setRef(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*IterationVarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // WhileStmt ::= T_WHILE NT$10 Expr NT$11 CodeBlock 
            {
              String RESULT = null;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						((MyParser) parser).WriteWhileEnd();
					
              CUP$parser$result = new java_cup.runtime.Symbol(17/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$11 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

						((MyParser) parser).DoExprBoolCheck(_1);
						((MyParser) parser).WriteWhileMiddle(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(85/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$10 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

						
						((MyParser) parser).WriteForWhileBegin("while");
					
              CUP$parser$result = new java_cup.runtime.Symbol(84/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OptElse ::= 
            {
              Object RESULT = null;
		
						((MyParser) parser).WriteEndStatementEnd();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(6/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OptElse ::= T_ELSE CodeBlock 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						((MyParser) parser).WriteEndStatementEnd();
					
              CUP$parser$result = new java_cup.runtime.Symbol(6/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IfStmt ::= T_IF Expr NT$8 CodeBlock NT$9 OptElse 
            {
              String RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						
					
              CUP$parser$result = new java_cup.runtime.Symbol(25/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$9 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

						((MyParser) parser).DoExprBoolCheck(_1);
						((MyParser) parser).WriteIfStatementEnd();
					
              CUP$parser$result = new java_cup.runtime.Symbol(83/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$8 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

						((MyParser) parser).WriteIfStatement(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(82/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OptInit ::= 
            {
              STO RESULT = null;
		
    					RESULT = null;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(53/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OptInit ::= T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(53/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IdListWInit ::= IdListWInit T_COMMA OptModifierList OptArrayDef T_ID T_ASSIGN ConstExpr 
            {
              InfoBlock RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		InfoBlock _1 = (InfoBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer _6 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer _5 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
						STO s = ((MyParser) parser).checkConstExpr(_3, _4);
						RESULT.addId (_3, s, _5, _6);
		  			
              CUP$parser$result = new java_cup.runtime.Symbol(72/*IdListWInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IdListWInit ::= OptModifierList OptArrayDef T_ID T_ASSIGN ConstExpr 
            {
              InfoBlock RESULT = null;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer _4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer _3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new InfoBlock ();
						STO s = ((MyParser) parser).checkConstExpr(_1, _2);
						RESULT.addId (_1, s, _3, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(72/*IdListWInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IdListWOptInit ::= IdListWOptInit T_COMMA OptModifierList OptArrayDef T_ID OptInit 
            {
              InfoBlock RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		InfoBlock _1 = (InfoBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer _5 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer _2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addId (_3, _4, _2, _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*IdListWOptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IdListWOptInit ::= OptModifierList OptArrayDef T_ID OptInit 
            {
              InfoBlock RESULT = null;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer _5 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer _3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	RESULT = new InfoBlock();
                        RESULT.addId (_1, _2, _3, _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*IdListWOptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IdListUpper ::= IdListUpper T_COMMA T_ID_U 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*IdListUpper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IdListUpper ::= T_ID_U 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*IdListUpper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IdList ::= IdList T_COMMA OptModifierList OptArrayDef T_ID 
            {
              InfoBlock RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		InfoBlock _1 = (InfoBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer _4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _5 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addId (_3, null, _5, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(73/*IdList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IdList ::= OptModifierList OptArrayDef T_ID 
            {
              InfoBlock RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer _2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new InfoBlock ();
                        RESULT.addId (_1, null, _3, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(73/*IdList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OptRef ::= 
            {
              Boolean RESULT = null;
		
    					RESULT = false;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(61/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OptRef ::= T_AMPERSAND 
            {
              Boolean RESULT = null;
		
						RESULT = true;
					
              CUP$parser$result = new java_cup.runtime.Symbol(61/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ParamDecl ::= Type OptRef T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoRefCheck(_1, _2, _3);
					
              CUP$parser$result = new java_cup.runtime.Symbol(50/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    					RESULT.addElement (_2);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(68/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector<STO> ();
						RESULT.addElement (_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(68/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OptParamList ::= 
            {
              Vector RESULT = null;
		
                    	RESULT = new Vector<STO>();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					    RESULT = ((MyParser) parser).DoMultiParamCheck(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(67/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Stmt ::= WriteStmt 
            {
              String RESULT = null;
		int _117left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _117right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _117 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _117;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Stmt ::= ReadStmt 
            {
              String RESULT = null;
		int _116left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _116right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _116 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _116;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Stmt ::= ReturnStmt 
            {
              String RESULT = null;
		int _115left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _115right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _115 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    				RESULT = _115;
    			
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Stmt ::= ExitStmt 
            {
              String RESULT = null;
		int _114left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _114right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _114 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _114;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Stmt ::= NewStmt 
            {
              String RESULT = null;
		int _113left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _113right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _113 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _113;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Stmt ::= DeleteStmt 
            {
              String RESULT = null;
		int _111left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _111right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _111 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _111;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Stmt ::= ContinueStmt 
            {
              String RESULT = null;
		int _19left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _19right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _19 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _19;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Stmt ::= BreakStmt 
            {
              String RESULT = null;
		int _18left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _18right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _18 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _18;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Stmt ::= ForeachStmt 
            {
              String RESULT = null;
		int _17left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _17right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _17 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _17;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= WhileStmt 
            {
              String RESULT = null;
		int _16left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _16right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _16 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _16;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= IfStmt 
            {
              String RESULT = null;
		int _15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _15 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _15;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= Expr T_SEMI 
            {
              String RESULT = null;
		int _14left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _14right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _14 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = _14.getName();
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= CodeBlock 
            {
              String RESULT = null;
		int _13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _13 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _13;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= TypedefDecl 
            {
              String RESULT = null;
		int _12left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _12right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _12 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _12;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= ConstDecl 
            {
              String RESULT = null;
		int _11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _11 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _11;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= VarDecl 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StmtList ::= StmtList Stmt 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						((MyParser) parser).WriteSpace(_2);
    					RESULT = _1;
    					RESULT.add(_2);
    					
    				
              CUP$parser$result = new java_cup.runtime.Symbol(65/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StmtList ::= Stmt 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						((MyParser) parser).WriteSpace(_1);
						RESULT = new Vector<STO>();
						RESULT.add(_1);
						
					
              CUP$parser$result = new java_cup.runtime.Symbol(65/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OptStmtList ::= 
            {
              Vector RESULT = null;
		
    					RESULT = new Vector<STO>();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(64/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OptStmtList ::= StmtList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(64/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CodeBlock ::= T_LBRACE NT$6 OptStmtList NT$7 T_RBRACE 
            {
              String RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    	((MyParser) parser).DoBlockClose();
                    	RESULT = "CodeBlock{}";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$7 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 
		   				
		   			
              CUP$parser$result = new java_cup.runtime.Symbol(81/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$6 ::= 
            {
              Object RESULT = null;
 
                    	((MyParser) parser).DoBlockOpen();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(80/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;
		
       					RESULT = new VoidType();
      				
              CUP$parser$result = new java_cup.runtime.Symbol(59/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ReturnType ::= SubType OptModifierList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	RESULT = ((MyParser) parser).TransformType(ArrayType.NO_ARRAY, _2, _1);
                        // You should determine the type and return it here
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OptArrayDef ::= 
            {
              Integer RESULT = null;
		
    					RESULT = -1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(8/*OptArrayDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptArrayDef ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              Integer RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						((MyParser) parser).ValidArray(_1);
						if(_1 instanceof ConstSTO)
							RESULT = ((ConstSTO)_1).getIntValue();
						else
							RESULT = 0;
					
              CUP$parser$result = new java_cup.runtime.Symbol(8/*OptArrayDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Modifier ::= T_STAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*Modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ModifierList ::= ModifierList Modifier 
            {
              Integer RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    					RESULT = _1 + 1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(10/*ModifierList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ModifierList ::= Modifier 
            {
              Integer RESULT = null;
							
						RESULT = 1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(10/*ModifierList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OptModifierList ::= 
            {
              Integer RESULT = null;
		
    					RESULT = 0;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(9/*OptModifierList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OptModifierList ::= ModifierList 
            {
              Integer RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(9/*OptModifierList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		
    			    	RESULT = new BoolType();
    			    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		
    					RESULT = new FloatType();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(55/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new IntType();
					
              CUP$parser$result = new java_cup.runtime.Symbol(55/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SubType ::= BasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SubType ::= QualIdent 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).SetQualIdent(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // UndecoratedType ::= T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList T_RPAREN 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    					FunctionPointerType t = new FunctionPointerType(_1);
    					t.setRef(_2);
    					t.setParameters(_3);
    					RESULT = t;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(58/*UndecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // UndecoratedType ::= SubType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(58/*UndecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList T_RPAREN 
            {
              Type RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean _4 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				 	RESULT = ((MyParser) parser).DoFuncPtr(_2, _3, _4);
				 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= SubType OptModifierList OptArrayDef 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				 	RESULT = ((MyParser) parser).TransformType(_4, _2, _1);
				 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$4 T_LPAREN OptParamList T_RPAREN NT$5 T_SEMI 
            {
              String RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _4 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _7 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    	RESULT = _1 + _5 + _3 + _4.getName() + _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(22/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _4 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _7 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_7); /* where the params are set*/
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _4 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoFuncDecl_1(_2, _4); /*where the function name and typenote */
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$2 T_LPAREN OptParamList T_RPAREN NT$3 T_LBRACE OptStmtList T_RBRACE 
            {
              STO RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Type _4 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Boolean _8 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _6 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoFuncDecl_2(_4, _6);
                        ((MyParser) parser).WriteFuncDeclFinish(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Object RESULT = null;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _4 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _8 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_3); //set the parameters
                      	((MyParser) parser).WriteFuncDecl(_2, _3);		//Write Function Header
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT = null;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _4 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean _8 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_2, _4).setRef(_8);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FieldList ::= FuncDef 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    				RESULT = new Vector<STO>();
    				RESULT.add(_1);
    				((FuncSTO)_1).setIsMemberFunction();
    			
              CUP$parser$result = new java_cup.runtime.Symbol(66/*FieldList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldList ::= UndecoratedType IdList T_SEMI 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InfoBlock _2 = (InfoBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//result should be a vector of stos with set types.  id list is a list of var stos with no types
					RESULT = ((MyParser) parser).ChangeTypes(_1, _2);
				
              CUP$parser$result = new java_cup.runtime.Symbol(66/*FieldList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FieldsList ::= FieldsList FieldList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    				RESULT = _1;
    				for(Object s: _2)
    					_1.add(s);
    			
              CUP$parser$result = new java_cup.runtime.Symbol(62/*FieldsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FieldsList ::= FieldList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(62/*FieldsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypedefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$1 FieldsList T_RBRACE T_SEMI 
            {
              String RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    	int size = ((MyParser) parser).DoStructFieldCheck(_5, _1);
                        ((MyParser) parser).DoBlockClose();
                    	((MyParser) parser).DoStructdefDecl2(_1, _5, size);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*TypedefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$1 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
              
                        ((MyParser) parser).DoStructdefDecl1(_1);  
                        ((MyParser) parser).DoBlockOpen();                         
                    	
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypedefDecl ::= T_TYPEDEF Type IdListUpper T_SEMI 
            {
              String RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _3 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoTypedefDecl (_2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*TypedefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OptStatic ::= 
            {
              Boolean RESULT = null;
		
    				RESULT = false;
    			
              CUP$parser$result = new java_cup.runtime.Symbol(60/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OptStatic ::= T_STATIC 
            {
              Boolean RESULT = null;
		
					RESULT = true;
				
              CUP$parser$result = new java_cup.runtime.Symbol(60/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDecl ::= OptStatic T_CONST UndecoratedType IdListWInit T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _4 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InfoBlock _3 = (InfoBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       ArrayList<STO> stos = ((MyParser) parser).DoConstDecl (_4, _3, _1);
                       RESULT = _2 + ((MyParser) parser).WriteVarDecl(stos);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(16/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= OptStatic UndecoratedType IdListWOptInit T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _7 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InfoBlock _3 = (InfoBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ArrayList<STO> stos = ((MyParser) parser).DoVarDecl (_3, _7, _1);
                        RESULT = ((MyParser) parser).WriteVarDecl(stos);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(26/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ExternDecl ::= T_EXTERN UndecoratedType IdList T_SEMI 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InfoBlock _3 = (InfoBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         ((MyParser) parser).DoExternDecl (_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(23/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1.getName();
				
              CUP$parser$result = new java_cup.runtime.Symbol(28/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(28/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= TypedefDecl 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(28/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(28/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(28/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(28/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    				System.out.println(_1);
    			
              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					System.out.println(_1);
				
              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         ((MyParser) parser).DoProgramEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                         ((MyParser) parser).DoProgramStart(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

